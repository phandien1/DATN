
DATN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a4  080058a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080058a4  080058a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a4  080058a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080058ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000010  080058bc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080058bc  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001147e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025dd  00000000  00000000  000314b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00033a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00034af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab1  00000000  00000000  00035a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013463  00000000  00000000  0004e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da80  00000000  00000000  0006199c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef41c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  000ef46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005820 	.word	0x08005820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005820 	.word	0x08005820

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_UART_RxCpltCallback+0x2c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d106      	bne.n	8000bc8 <HAL_UART_RxCpltCallback+0x20>
	{
		SETFLAG(flagSEN,FLAG_PMS_DONE);
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_UART_RxCpltCallback+0x30>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_UART_RxCpltCallback+0x30>)
 8000bc6:	701a      	strb	r2, [r3, #0]
//		PMS7003_receive(&myPMS);
	}
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	200001b2 	.word	0x200001b2

08000bdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim2.Instance)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d10a      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x2a>
	 {
		 __HAL_TIM_SetCounter(&htim2, 0);
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
		 SETFLAG(flagTIMER,FLAG_TIMER_DONE);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c04:	701a      	strb	r2, [r3, #0]
	 }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000080 	.word	0x20000080
 8000c14:	200001b3 	.word	0x200001b3

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fc3c 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f82a 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f93e 	bl	8000ea4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c28:	f000 f86c 	bl	8000d04 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c2c:	f000 f8e6 	bl	8000dfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c30:	f000 f90e 	bl	8000e50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c34:	f000 f894 	bl	8000d60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  hc595_SetUp();
 8000c38:	f000 fa0e 	bl	8001058 <hc595_SetUp>
  PMS7003_SetUp();
 8000c3c:	f000 fa32 	bl	80010a4 <PMS7003_SetUp>
  SHT31_Config(SHT31_ADDRESS_A, &hi2c1);
 8000c40:	490a      	ldr	r1, [pc, #40]	; (8000c6c <main+0x54>)
 8000c42:	2044      	movs	r0, #68	; 0x44
 8000c44:	f004 fbd0 	bl	80053e8 <SHT31_Config>
  LCD_SetUp();
 8000c48:	f000 fa58 	bl	80010fc <LCD_SetUp>
  lcd_Init();
 8000c4c:	f004 f82a 	bl	8004ca4 <lcd_Init>
  lcd_Put_Cur(0,2);
 8000c50:	2102      	movs	r1, #2
 8000c52:	2000      	movs	r0, #0
 8000c54:	f004 fac5 	bl	80051e2 <lcd_Put_Cur>
  lcd_Send_String("DIEN");
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <main+0x58>)
 8000c5a:	f004 faad 	bl	80051b8 <lcd_Send_String>
  HAL_TIM_Base_Start_IT(&htim2);
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <main+0x5c>)
 8000c60:	f002 fc90 	bl	8003584 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Flags_handle();
 8000c64:	f000 f978 	bl	8000f58 <Flags_handle>
 8000c68:	e7fc      	b.n	8000c64 <main+0x4c>
 8000c6a:	bf00      	nop
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	08005838 	.word	0x08005838
 8000c74:	20000080 	.word	0x20000080

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	; 0x40
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fdc2 	bl	8005810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0318 	add.w	r3, r7, #24
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 ffff 	bl	8002cc4 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ccc:	f000 fa44 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fa6c 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cf6:	f000 fa2f 	bl	8001158 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3740      	adds	r7, #64	; 0x40
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C1_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_I2C1_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d42:	f000 ff8b 	bl	8001c5c <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 fa04 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000002c 	.word	0x2000002c
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	000186a0 	.word	0x000186a0

08000d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d86:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000d8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000da8:	f002 fb9c 	bl	80034e4 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000db2:	f000 f9d1 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000dc4:	f002 fd38 	bl	8003838 <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dce:	f000 f9c3 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000de0:	f002 ff0e 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dea:	f000 f9b5 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000080 	.word	0x20000080

08000dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <MX_USART1_UART_Init+0x50>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f002 ff54 	bl	8003ce0 <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e3e:	f000 f98b 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000c8 	.word	0x200000c8
 8000e4c:	40013800 	.word	0x40013800

08000e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART2_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e88:	f002 ff2a 	bl	8003ce0 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 f961 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000110 	.word	0x20000110
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a24      	ldr	r2, [pc, #144]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_GPIO_Init+0xac>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|ST_Pin|DATA_Pin|OE_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f24e 0120 	movw	r1, #57376	; 0xe020
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_GPIO_Init+0xb0>)
 8000f08:	f000 fe90 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLK_Pin ST_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|ST_Pin|DATA_Pin;
 8000f0c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f12:	2311      	movs	r3, #17
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4619      	mov	r1, r3
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <MX_GPIO_Init+0xb0>)
 8000f26:	f000 fcfd 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_GPIO_Init+0xb0>)
 8000f42:	f000 fcef 	bl	8001924 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <Flags_handle>:

/* USER CODE BEGIN 4 */
void Flags_handle()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	if (CHECKFLAG(flagSEN,FLAG_PMS_DONE))
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <Flags_handle+0xc4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d031      	beq.n	8000fce <Flags_handle+0x76>
	{
		pm1p0 = calculator(&myPMS, PM1p0);
 8000f6a:	210a      	movs	r1, #10
 8000f6c:	482c      	ldr	r0, [pc, #176]	; (8001020 <Flags_handle+0xc8>)
 8000f6e:	f004 fa08 	bl	8005382 <calculator>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <Flags_handle+0xcc>)
 8000f78:	801a      	strh	r2, [r3, #0]
		pm2p5 = calculator(&myPMS, PM2p5);
 8000f7a:	2119      	movs	r1, #25
 8000f7c:	4828      	ldr	r0, [pc, #160]	; (8001020 <Flags_handle+0xc8>)
 8000f7e:	f004 fa00 	bl	8005382 <calculator>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <Flags_handle+0xd0>)
 8000f88:	801a      	strh	r2, [r3, #0]
		pm10 = calculator(&myPMS, PM10);
 8000f8a:	2164      	movs	r1, #100	; 0x64
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <Flags_handle+0xc8>)
 8000f8e:	f004 f9f8 	bl	8005382 <calculator>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <Flags_handle+0xd4>)
 8000f98:	801a      	strh	r2, [r3, #0]
		if(SHT31_GetData(SHT31_Periodic, SHT31_Medium, SHT31_NON_Stretch, SHT31_1) == SHT31_OK)
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f004 fa8f 	bl	80054c4 <SHT31_GetData>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <Flags_handle+0x68>
			{
				temperature = SHT31_GetTemperature();
 8000fac:	f004 fbd8 	bl	8005760 <SHT31_GetTemperature>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <Flags_handle+0xd8>)
 8000fb4:	6013      	str	r3, [r2, #0]
				humidity = SHT31_GetHumidity();
 8000fb6:	f004 fbab 	bl	8005710 <SHT31_GetHumidity>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <Flags_handle+0xdc>)
 8000fbe:	6013      	str	r3, [r2, #0]
			}
		CLEARFLAG(flagSEN,FLAG_PMS_DONE);
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <Flags_handle+0xc4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <Flags_handle+0xc4>)
 8000fcc:	701a      	strb	r2, [r3, #0]
	}
	if (CHECKFLAG(flagTIMER,FLAG_TIMER_DONE))
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <Flags_handle+0xe0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01d      	beq.n	8001018 <Flags_handle+0xc0>
	{
		turn_on_int();
 8000fdc:	f000 f832 	bl	8001044 <turn_on_int>
		count++;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <Flags_handle+0xe4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <Flags_handle+0xe4>)
 8000fe8:	6013      	str	r3, [r2, #0]
		CB[0]=(float)pm2p5;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <Flags_handle+0xd0>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd82 	bl	8000af8 <__aeabi_ui2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <Flags_handle+0xe8>)
 8000ff8:	6013      	str	r3, [r2, #0]
		CB[1]=temperature;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <Flags_handle+0xd8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <Flags_handle+0xe8>)
 8001000:	6053      	str	r3, [r2, #4]
		CB[2]=humidity;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <Flags_handle+0xdc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <Flags_handle+0xe8>)
 8001008:	6093      	str	r3, [r2, #8]
		CLEARFLAG(flagTIMER,FLAG_TIMER_DONE);
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <Flags_handle+0xe0>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <Flags_handle+0xe0>)
 8001016:	701a      	strb	r2, [r3, #0]
	}
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200001b2 	.word	0x200001b2
 8001020:	20000158 	.word	0x20000158
 8001024:	200001ac 	.word	0x200001ac
 8001028:	200001ae 	.word	0x200001ae
 800102c:	200001b0 	.word	0x200001b0
 8001030:	200001b8 	.word	0x200001b8
 8001034:	200001bc 	.word	0x200001bc
 8001038:	200001b3 	.word	0x200001b3
 800103c:	200001b4 	.word	0x200001b4
 8001040:	200001c0 	.word	0x200001c0

08001044 <turn_on_int>:

void turn_on_int()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	PMS7003_receive(&myPMS);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <turn_on_int+0x10>)
 800104a:	f004 f974 	bl	8005336 <PMS7003_receive>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000158 	.word	0x20000158

08001058 <hc595_SetUp>:

void hc595_SetUp()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HC595_AssignPin(&my595, GPIOB, GPIO_PIN_13, HC595_CLK);
 800105c:	2301      	movs	r3, #1
 800105e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001062:	490e      	ldr	r1, [pc, #56]	; (800109c <hc595_SetUp+0x44>)
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <hc595_SetUp+0x48>)
 8001066:	f003 fcb3 	bl	80049d0 <HC595_AssignPin>
	HC595_AssignPin(&my595, GPIOB, GPIO_PIN_15, HC595_DS);
 800106a:	2302      	movs	r3, #2
 800106c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001070:	490a      	ldr	r1, [pc, #40]	; (800109c <hc595_SetUp+0x44>)
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <hc595_SetUp+0x48>)
 8001074:	f003 fcac 	bl	80049d0 <HC595_AssignPin>
	HC595_AssignPin(&my595, GPIOB, GPIO_PIN_14, HC595_LATCH);
 8001078:	2300      	movs	r3, #0
 800107a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107e:	4907      	ldr	r1, [pc, #28]	; (800109c <hc595_SetUp+0x44>)
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <hc595_SetUp+0x48>)
 8001082:	f003 fca5 	bl	80049d0 <HC595_AssignPin>
	HC595_AssignPin(&my595, GPIOB, GPIO_PIN_5,HC595_OE);
 8001086:	2303      	movs	r3, #3
 8001088:	2220      	movs	r2, #32
 800108a:	4904      	ldr	r1, [pc, #16]	; (800109c <hc595_SetUp+0x44>)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <hc595_SetUp+0x48>)
 800108e:	f003 fc9f 	bl	80049d0 <HC595_AssignPin>
	HC595_Enable();
 8001092:	f003 fdaf 	bl	8004bf4 <HC595_Enable>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	20000180 	.word	0x20000180

080010a4 <PMS7003_SetUp>:

void PMS7003_SetUp()
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
	myPMS = newPMS7003();
 80010aa:	4c11      	ldr	r4, [pc, #68]	; (80010f0 <PMS7003_SetUp+0x4c>)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f8b6 	bl	8005220 <newPMS7003>
 80010b4:	4625      	mov	r5, r4
 80010b6:	463c      	mov	r4, r7
 80010b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010c4:	e885 0003 	stmia.w	r5, {r0, r1}
	myPMS.hUARTx = &huart2;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <PMS7003_SetUp+0x4c>)
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <PMS7003_SetUp+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
	memset(myPMS.buffer,0,sizeof(myPMS.buffer));
 80010ce:	2220      	movs	r2, #32
 80010d0:	2100      	movs	r1, #0
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <PMS7003_SetUp+0x54>)
 80010d4:	f004 fb9c 	bl	8005810 <memset>
	PMS7003_init_setmode(&myPMS,DATAL_active);
 80010d8:	2101      	movs	r1, #1
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <PMS7003_SetUp+0x4c>)
 80010dc:	f004 f8e0 	bl	80052a0 <PMS7003_init_setmode>
	PMS7003_start_receive(&myPMS);
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <PMS7003_SetUp+0x4c>)
 80010e2:	f004 f917 	bl	8005314 <PMS7003_start_receive>
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdb0      	pop	{r4, r5, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000158 	.word	0x20000158
 80010f4:	20000110 	.word	0x20000110
 80010f8:	2000015d 	.word	0x2000015d

080010fc <LCD_SetUp>:

void LCD_SetUp()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	LCD_AssignPin(&myLCD, 0, LCD_RS_PIN);
 8001100:	2201      	movs	r2, #1
 8001102:	2100      	movs	r1, #0
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <LCD_SetUp+0x58>)
 8001106:	f003 fd85 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 1, LCD_RW_PIN);
 800110a:	2202      	movs	r2, #2
 800110c:	2101      	movs	r1, #1
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <LCD_SetUp+0x58>)
 8001110:	f003 fd80 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 2, LCD_EN_PIN);
 8001114:	2200      	movs	r2, #0
 8001116:	2102      	movs	r1, #2
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <LCD_SetUp+0x58>)
 800111a:	f003 fd7b 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 3, LCD_DB4);
 800111e:	2204      	movs	r2, #4
 8001120:	2103      	movs	r1, #3
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <LCD_SetUp+0x58>)
 8001124:	f003 fd76 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 4, LCD_DB5);
 8001128:	2205      	movs	r2, #5
 800112a:	2104      	movs	r1, #4
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <LCD_SetUp+0x58>)
 800112e:	f003 fd71 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 5, LCD_DB6);
 8001132:	2206      	movs	r2, #6
 8001134:	2105      	movs	r1, #5
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <LCD_SetUp+0x58>)
 8001138:	f003 fd6c 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 6, LCD_DB7);
 800113c:	2207      	movs	r2, #7
 800113e:	2106      	movs	r1, #6
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <LCD_SetUp+0x58>)
 8001142:	f003 fd67 	bl	8004c14 <LCD_AssignPin>
	LCD_AssignPin(&myLCD, 7, LCD_BL_PIN);
 8001146:	2203      	movs	r2, #3
 8001148:	2107      	movs	r1, #7
 800114a:	4802      	ldr	r0, [pc, #8]	; (8001154 <LCD_SetUp+0x58>)
 800114c:	f003 fd62 	bl	8004c14 <LCD_AssignPin>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001a4 	.word	0x200001a4

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <HAL_I2C_MspInit+0x70>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d123      	bne.n	8001230 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_I2C_MspInit+0x74>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_I2C_MspInit+0x74>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_I2C_MspInit+0x74>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001200:	23c0      	movs	r3, #192	; 0xc0
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001204:	2312      	movs	r3, #18
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_I2C_MspInit+0x78>)
 8001214:	f000 fb86 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_I2C_MspInit+0x74>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_I2C_MspInit+0x74>)
 800121e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001222:	61d3      	str	r3, [r2, #28]
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_I2C_MspInit+0x74>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40005400 	.word	0x40005400
 800123c:	40021000 	.word	0x40021000
 8001240:	40010c00 	.word	0x40010c00

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001254:	d113      	bne.n	800127e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_TIM_Base_MspInit+0x44>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_TIM_Base_MspInit+0x44>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_TIM_Base_MspInit+0x44>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2102      	movs	r1, #2
 8001272:	201c      	movs	r0, #28
 8001274:	f000 fa6d 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001278:	201c      	movs	r0, #28
 800127a:	f000 fa86 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a3f      	ldr	r2, [pc, #252]	; (80013a4 <HAL_UART_MspInit+0x118>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d13a      	bne.n	8001322 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4619      	mov	r1, r3
 80012f0:	482e      	ldr	r0, [pc, #184]	; (80013ac <HAL_UART_MspInit+0x120>)
 80012f2:	f000 fb17 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4619      	mov	r1, r3
 800130a:	4828      	ldr	r0, [pc, #160]	; (80013ac <HAL_UART_MspInit+0x120>)
 800130c:	f000 fb0a 	bl	8001924 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2025      	movs	r0, #37	; 0x25
 8001316:	f000 fa1c 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800131a:	2025      	movs	r0, #37	; 0x25
 800131c:	f000 fa35 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001320:	e03c      	b.n	800139c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_UART_MspInit+0x124>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d137      	bne.n	800139c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 8001332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001336:	61d3      	str	r3, [r2, #28]
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_UART_MspInit+0x11c>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800135c:	2304      	movs	r3, #4
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	4619      	mov	r1, r3
 800136e:	480f      	ldr	r0, [pc, #60]	; (80013ac <HAL_UART_MspInit+0x120>)
 8001370:	f000 fad8 	bl	8001924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001374:	2308      	movs	r3, #8
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_UART_MspInit+0x120>)
 8001388:	f000 facc 	bl	8001924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2026      	movs	r0, #38	; 0x26
 8001392:	f000 f9de 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001396:	2026      	movs	r0, #38	; 0x26
 8001398:	f000 f9f7 	bl	800178a <HAL_NVIC_EnableIRQ>
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40004400 	.word	0x40004400

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fa:	f000 f893 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <TIM2_IRQHandler+0x10>)
 800140a:	f002 f90d 	bl	8003628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000080 	.word	0x20000080

08001418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <USART1_IRQHandler+0x10>)
 800141e:	f002 fd57 	bl	8003ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000c8 	.word	0x200000c8

0800142c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USART2_IRQHandler+0x10>)
 8001432:	f002 fd4d 	bl	8003ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000110 	.word	0x20000110

08001440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff fff8 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001452:	490c      	ldr	r1, [pc, #48]	; (8001484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001468:	4c09      	ldr	r4, [pc, #36]	; (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f004 f9a7 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147a:	f7ff fbcd 	bl	8000c18 <main>
  bx lr
 800147e:	4770      	bx	lr
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001488:	080058ac 	.word	0x080058ac
  ldr r2, =_sbss
 800148c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001490:	20000210 	.word	0x20000210

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f947 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fe56 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f95f 	bl	80017a6 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f927 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	20000008 	.word	0x20000008
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x1c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x20>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000008 	.word	0x20000008
 8001544:	200001d0 	.word	0x200001d0

08001548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_GetTick+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	200001d0 	.word	0x200001d0

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff fff0 	bl	8001548 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_Delay+0x44>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffe0 	bl	8001548 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <__NVIC_EnableIRQ+0x34>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff90 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff2d 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff42 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff35 	bl	8001608 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d008      	beq.n	80017e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e020      	b.n	800182a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020e 	bic.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d005      	beq.n	8001858 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2204      	movs	r2, #4
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e051      	b.n	80018fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 020e 	bic.w	r2, r2, #14
 8001866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_DMA_Abort_IT+0xd4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d029      	beq.n	80018d6 <HAL_DMA_Abort_IT+0xa2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <HAL_DMA_Abort_IT+0xd8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x9e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_DMA_Abort_IT+0xdc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01a      	beq.n	80018cc <HAL_DMA_Abort_IT+0x98>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_DMA_Abort_IT+0xe0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d012      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x92>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_DMA_Abort_IT+0xe4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00a      	beq.n	80018c0 <HAL_DMA_Abort_IT+0x8c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_DMA_Abort_IT+0xe8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <HAL_DMA_Abort_IT+0x86>
 80018b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018b8:	e00e      	b.n	80018d8 <HAL_DMA_Abort_IT+0xa4>
 80018ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018be:	e00b      	b.n	80018d8 <HAL_DMA_Abort_IT+0xa4>
 80018c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c4:	e008      	b.n	80018d8 <HAL_DMA_Abort_IT+0xa4>
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	e005      	b.n	80018d8 <HAL_DMA_Abort_IT+0xa4>
 80018cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d0:	e002      	b.n	80018d8 <HAL_DMA_Abort_IT+0xa4>
 80018d2:	2310      	movs	r3, #16
 80018d4:	e000      	b.n	80018d8 <HAL_DMA_Abort_IT+0xa4>
 80018d6:	2301      	movs	r3, #1
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_DMA_Abort_IT+0xec>)
 80018da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
    } 
  }
  return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020008 	.word	0x40020008
 800190c:	4002001c 	.word	0x4002001c
 8001910:	40020030 	.word	0x40020030
 8001914:	40020044 	.word	0x40020044
 8001918:	40020058 	.word	0x40020058
 800191c:	4002006c 	.word	0x4002006c
 8001920:	40020000 	.word	0x40020000

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b08b      	sub	sp, #44	; 0x2c
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001936:	e169      	b.n	8001c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001938:	2201      	movs	r2, #1
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 8158 	bne.w	8001c06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a9a      	ldr	r2, [pc, #616]	; (8001bc4 <HAL_GPIO_Init+0x2a0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d05e      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
 8001960:	4a98      	ldr	r2, [pc, #608]	; (8001bc4 <HAL_GPIO_Init+0x2a0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d875      	bhi.n	8001a52 <HAL_GPIO_Init+0x12e>
 8001966:	4a98      	ldr	r2, [pc, #608]	; (8001bc8 <HAL_GPIO_Init+0x2a4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d058      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
 800196c:	4a96      	ldr	r2, [pc, #600]	; (8001bc8 <HAL_GPIO_Init+0x2a4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d86f      	bhi.n	8001a52 <HAL_GPIO_Init+0x12e>
 8001972:	4a96      	ldr	r2, [pc, #600]	; (8001bcc <HAL_GPIO_Init+0x2a8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d052      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
 8001978:	4a94      	ldr	r2, [pc, #592]	; (8001bcc <HAL_GPIO_Init+0x2a8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d869      	bhi.n	8001a52 <HAL_GPIO_Init+0x12e>
 800197e:	4a94      	ldr	r2, [pc, #592]	; (8001bd0 <HAL_GPIO_Init+0x2ac>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d04c      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
 8001984:	4a92      	ldr	r2, [pc, #584]	; (8001bd0 <HAL_GPIO_Init+0x2ac>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d863      	bhi.n	8001a52 <HAL_GPIO_Init+0x12e>
 800198a:	4a92      	ldr	r2, [pc, #584]	; (8001bd4 <HAL_GPIO_Init+0x2b0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d046      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
 8001990:	4a90      	ldr	r2, [pc, #576]	; (8001bd4 <HAL_GPIO_Init+0x2b0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d85d      	bhi.n	8001a52 <HAL_GPIO_Init+0x12e>
 8001996:	2b12      	cmp	r3, #18
 8001998:	d82a      	bhi.n	80019f0 <HAL_GPIO_Init+0xcc>
 800199a:	2b12      	cmp	r3, #18
 800199c:	d859      	bhi.n	8001a52 <HAL_GPIO_Init+0x12e>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <HAL_GPIO_Init+0x80>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	080019f9 	.word	0x080019f9
 80019ac:	08001a0b 	.word	0x08001a0b
 80019b0:	08001a4d 	.word	0x08001a4d
 80019b4:	08001a53 	.word	0x08001a53
 80019b8:	08001a53 	.word	0x08001a53
 80019bc:	08001a53 	.word	0x08001a53
 80019c0:	08001a53 	.word	0x08001a53
 80019c4:	08001a53 	.word	0x08001a53
 80019c8:	08001a53 	.word	0x08001a53
 80019cc:	08001a53 	.word	0x08001a53
 80019d0:	08001a53 	.word	0x08001a53
 80019d4:	08001a53 	.word	0x08001a53
 80019d8:	08001a53 	.word	0x08001a53
 80019dc:	08001a53 	.word	0x08001a53
 80019e0:	08001a53 	.word	0x08001a53
 80019e4:	08001a53 	.word	0x08001a53
 80019e8:	08001a01 	.word	0x08001a01
 80019ec:	08001a15 	.word	0x08001a15
 80019f0:	4a79      	ldr	r2, [pc, #484]	; (8001bd8 <HAL_GPIO_Init+0x2b4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019f6:	e02c      	b.n	8001a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e029      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	3304      	adds	r3, #4
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e024      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	3308      	adds	r3, #8
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e01f      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	330c      	adds	r3, #12
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e01a      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a26:	2304      	movs	r3, #4
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e013      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a34:	2308      	movs	r3, #8
 8001a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	611a      	str	r2, [r3, #16]
          break;
 8001a3e:	e009      	b.n	8001a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	615a      	str	r2, [r3, #20]
          break;
 8001a4a:	e003      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
          break;
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x130>
          break;
 8001a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d801      	bhi.n	8001a5e <HAL_GPIO_Init+0x13a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	e001      	b.n	8001a62 <HAL_GPIO_Init+0x13e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d802      	bhi.n	8001a70 <HAL_GPIO_Init+0x14c>
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x152>
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	3b08      	subs	r3, #8
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	6a39      	ldr	r1, [r7, #32]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	431a      	orrs	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80b1 	beq.w	8001c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa4:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_GPIO_Init+0x2b8>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x2b8>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_GPIO_Init+0x2b8>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001abc:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_GPIO_Init+0x2bc>)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a40      	ldr	r2, [pc, #256]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_GPIO_Init+0x1ec>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <HAL_GPIO_Init+0x2c4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_Init+0x1e8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3e      	ldr	r2, [pc, #248]	; (8001bec <HAL_GPIO_Init+0x2c8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x1e4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_Init+0x1e0>
 8001b00:	2303      	movs	r3, #3
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_Init+0x1ee>
 8001b04:	2304      	movs	r3, #4
 8001b06:	e004      	b.n	8001b12 <HAL_GPIO_Init+0x1ee>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x1ee>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_Init+0x1ee>
 8001b10:	2300      	movs	r3, #0
 8001b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b14:	f002 0203 	and.w	r2, r2, #3
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b22:	492f      	ldr	r1, [pc, #188]	; (8001be0 <HAL_GPIO_Init+0x2bc>)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	492c      	ldr	r1, [pc, #176]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4928      	ldr	r1, [pc, #160]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4922      	ldr	r1, [pc, #136]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	491e      	ldr	r1, [pc, #120]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4918      	ldr	r1, [pc, #96]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4914      	ldr	r1, [pc, #80]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d021      	beq.n	8001bf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e021      	b.n	8001c06 <HAL_GPIO_Init+0x2e2>
 8001bc2:	bf00      	nop
 8001bc4:	10320000 	.word	0x10320000
 8001bc8:	10310000 	.word	0x10310000
 8001bcc:	10220000 	.word	0x10220000
 8001bd0:	10210000 	.word	0x10210000
 8001bd4:	10120000 	.word	0x10120000
 8001bd8:	10110000 	.word	0x10110000
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	40010800 	.word	0x40010800
 8001be8:	40010c00 	.word	0x40010c00
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40011400 	.word	0x40011400
 8001bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_GPIO_Init+0x304>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4909      	ldr	r1, [pc, #36]	; (8001c28 <HAL_GPIO_Init+0x304>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	3301      	adds	r3, #1
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f47f ae8e 	bne.w	8001938 <HAL_GPIO_Init+0x14>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	372c      	adds	r7, #44	; 0x2c
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c48:	e003      	b.n	8001c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e12b      	b.n	8001ec6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff faa0 	bl	80011c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f001 fbca 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a81      	ldr	r2, [pc, #516]	; (8001ed0 <HAL_I2C_Init+0x274>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d807      	bhi.n	8001ce0 <HAL_I2C_Init+0x84>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a80      	ldr	r2, [pc, #512]	; (8001ed4 <HAL_I2C_Init+0x278>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf94      	ite	ls
 8001cd8:	2301      	movls	r3, #1
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e006      	b.n	8001cee <HAL_I2C_Init+0x92>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a7d      	ldr	r2, [pc, #500]	; (8001ed8 <HAL_I2C_Init+0x27c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	bf94      	ite	ls
 8001ce8:	2301      	movls	r3, #1
 8001cea:	2300      	movhi	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0e7      	b.n	8001ec6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4a78      	ldr	r2, [pc, #480]	; (8001edc <HAL_I2C_Init+0x280>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0c9b      	lsrs	r3, r3, #18
 8001d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a6a      	ldr	r2, [pc, #424]	; (8001ed0 <HAL_I2C_Init+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d802      	bhi.n	8001d30 <HAL_I2C_Init+0xd4>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	e009      	b.n	8001d44 <HAL_I2C_Init+0xe8>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	4a69      	ldr	r2, [pc, #420]	; (8001ee0 <HAL_I2C_Init+0x284>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	3301      	adds	r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	495c      	ldr	r1, [pc, #368]	; (8001ed0 <HAL_I2C_Init+0x274>)
 8001d60:	428b      	cmp	r3, r1
 8001d62:	d819      	bhi.n	8001d98 <HAL_I2C_Init+0x13c>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e59      	subs	r1, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d72:	1c59      	adds	r1, r3, #1
 8001d74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d78:	400b      	ands	r3, r1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_I2C_Init+0x138>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e59      	subs	r1, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d92:	e051      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e04f      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d111      	bne.n	8001dc4 <HAL_I2C_Init+0x168>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e58      	subs	r0, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	440b      	add	r3, r1
 8001dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e012      	b.n	8001dea <HAL_I2C_Init+0x18e>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	0099      	lsls	r1, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Init+0x196>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e022      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <HAL_I2C_Init+0x1bc>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e58      	subs	r0, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	0099      	lsls	r1, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	6809      	ldr	r1, [r1, #0]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6911      	ldr	r1, [r2, #16]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	000186a0 	.word	0x000186a0
 8001ed4:	001e847f 	.word	0x001e847f
 8001ed8:	003d08ff 	.word	0x003d08ff
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	10624dd3 	.word	0x10624dd3

08001ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff fb26 	bl	8001548 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	f040 80e0 	bne.w	80020cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	4970      	ldr	r1, [pc, #448]	; (80020d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fc9e 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e0d3      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Transmit+0x50>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0cc      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d007      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_I2C_Master_Transmit+0x1f8>)
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fb08 	bl	80025b8 <I2C_MasterRequestWrite>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e08d      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fc8:	e066      	b.n	8002098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	6a39      	ldr	r1, [r7, #32]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fd5c 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d11b      	bne.n	800206c <HAL_I2C_Master_Transmit+0x188>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	d017      	beq.n	800206c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	6a39      	ldr	r1, [r7, #32]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fd53 	bl	8002b1c <I2C_WaitOnBTFFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b04      	cmp	r3, #4
 8002082:	d107      	bne.n	8002094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e01a      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d194      	bne.n	8001fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e000      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	00100002 	.word	0x00100002
 80020dc:	ffff0000 	.word	0xffff0000

080020e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	460b      	mov	r3, r1
 80020ee:	817b      	strh	r3, [r7, #10]
 80020f0:	4613      	mov	r3, r2
 80020f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff fa26 	bl	8001548 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 824b 	bne.w	80025a2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2319      	movs	r3, #25
 8002112:	2201      	movs	r2, #1
 8002114:	497f      	ldr	r1, [pc, #508]	; (8002314 <HAL_I2C_Master_Receive+0x234>)
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fb9e 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	e23e      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_I2C_Master_Receive+0x54>
 8002130:	2302      	movs	r3, #2
 8002132:	e237      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d007      	beq.n	800215a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002168:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2222      	movs	r2, #34	; 0x22
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2210      	movs	r2, #16
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	893a      	ldrh	r2, [r7, #8]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a5f      	ldr	r2, [pc, #380]	; (8002318 <HAL_I2C_Master_Receive+0x238>)
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fa8a 	bl	80026bc <I2C_MasterRequestRead>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1f8      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e1cc      	b.n	800257c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d11e      	bne.n	8002228 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002224:	b662      	cpsie	i
}
 8002226:	e035      	b.n	8002294 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b02      	cmp	r3, #2
 800222e:	d11e      	bne.n	800226e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
}
 8002242:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002268:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800226a:	b662      	cpsie	i
}
 800226c:	e012      	b.n	8002294 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800227c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002294:	e172      	b.n	800257c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	2b03      	cmp	r3, #3
 800229c:	f200 811f 	bhi.w	80024de <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d123      	bne.n	80022f0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fc7d 	bl	8002bac <I2C_WaitOnRXNEFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e173      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ee:	e145      	b.n	800257c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d152      	bne.n	800239e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	2200      	movs	r2, #0
 8002300:	4906      	ldr	r1, [pc, #24]	; (800231c <HAL_I2C_Master_Receive+0x23c>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 faa8 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e148      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
 8002312:	bf00      	nop
 8002314:	00100002 	.word	0x00100002
 8002318:	ffff0000 	.word	0xffff0000
 800231c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002366:	b662      	cpsie	i
}
 8002368:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800239c:	e0ee      	b.n	800257c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	2200      	movs	r2, #0
 80023a6:	4981      	ldr	r1, [pc, #516]	; (80025ac <HAL_I2C_Master_Receive+0x4cc>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fa55 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0f5      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023fe:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <HAL_I2C_Master_Receive+0x4d0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	4a6b      	ldr	r2, [pc, #428]	; (80025b4 <HAL_I2C_Master_Receive+0x4d4>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0a1a      	lsrs	r2, r3, #8
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00da      	lsls	r2, r3, #3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	3b01      	subs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d118      	bne.n	8002456 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002446:	b662      	cpsie	i
}
 8002448:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0a6      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d1d9      	bne.n	8002418 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024a6:	b662      	cpsie	i
}
 80024a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024dc:	e04e      	b.n	800257c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fb62 	bl	8002bac <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e058      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d124      	bne.n	800257c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b03      	cmp	r3, #3
 8002538:	d107      	bne.n	800254a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002548:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f ae88 	bne.w	8002296 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
  }
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00010004 	.word	0x00010004
 80025b0:	20000000 	.word	0x20000000
 80025b4:	14f8b589 	.word	0x14f8b589

080025b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d006      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d003      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e0:	d108      	bne.n	80025f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00b      	b.n	800260c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d107      	bne.n	800260c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f91d 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002632:	d103      	bne.n	800263c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e035      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002648:	d108      	bne.n	800265c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e01b      	b.n	8002694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	11db      	asrs	r3, r3, #7
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 0306 	and.w	r3, r3, #6
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f063 030f 	orn	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <I2C_MasterRequestWrite+0xfc>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f966 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e010      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <I2C_MasterRequestWrite+0x100>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f956 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010008 	.word	0x00010008
 80026b8:	00010002 	.word	0x00010002

080026bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d006      	beq.n	80026f6 <I2C_MasterRequestRead+0x3a>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d003      	beq.n	80026f6 <I2C_MasterRequestRead+0x3a>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f4:	d108      	bne.n	8002708 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e00b      	b.n	8002720 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	2b11      	cmp	r3, #17
 800270e:	d107      	bne.n	8002720 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f893 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002746:	d103      	bne.n	8002750 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e079      	b.n	8002848 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800275c:	d108      	bne.n	8002770 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	611a      	str	r2, [r3, #16]
 800276e:	e05f      	b.n	8002830 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002770:	897b      	ldrh	r3, [r7, #10]
 8002772:	11db      	asrs	r3, r3, #7
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0306 	and.w	r3, r3, #6
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f063 030f 	orn	r3, r3, #15
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4930      	ldr	r1, [pc, #192]	; (8002850 <I2C_MasterRequestRead+0x194>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f8dc 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e054      	b.n	8002848 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4929      	ldr	r1, [pc, #164]	; (8002854 <I2C_MasterRequestRead+0x198>)
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f8cc 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e044      	b.n	8002848 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f831 	bl	8002858 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d103      	bne.n	8002814 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e017      	b.n	8002848 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	11db      	asrs	r3, r3, #7
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 0306 	and.w	r3, r3, #6
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f063 030e 	orn	r3, r3, #14
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <I2C_MasterRequestRead+0x198>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f888 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00010008 	.word	0x00010008
 8002854:	00010002 	.word	0x00010002

08002858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002868:	e048      	b.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d044      	beq.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7fe fe69 	bl	8001548 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d139      	bne.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10d      	bne.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	e00c      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d116      	bne.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e023      	b.n	8002944 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10d      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	43da      	mvns	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	e00c      	b.n	800293c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	43da      	mvns	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	429a      	cmp	r2, r3
 8002940:	d093      	beq.n	800286a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800295a:	e071      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296a:	d123      	bne.n	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002984:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e067      	b.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d041      	beq.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7fe fdc4 	bl	8001548 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d136      	bne.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10c      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf14      	ite	ne
 80029ee:	2301      	movne	r3, #1
 80029f0:	2300      	moveq	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e00b      	b.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e021      	b.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10c      	bne.n	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e00b      	b.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f af6d 	bne.w	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a98:	e034      	b.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f8e3 	bl	8002c66 <I2C_IsAcknowledgeFailed>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e034      	b.n	8002b14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d028      	beq.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe fd49 	bl	8001548 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b80      	cmp	r3, #128	; 0x80
 8002ad4:	d016      	beq.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e007      	b.n	8002b14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b80      	cmp	r3, #128	; 0x80
 8002b10:	d1c3      	bne.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b28:	e034      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f89b 	bl	8002c66 <I2C_IsAcknowledgeFailed>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e034      	b.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d028      	beq.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7fe fd01 	bl	8001548 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11d      	bne.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d016      	beq.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d1c3      	bne.n	8002b2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb8:	e049      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d119      	bne.n	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0210 	mvn.w	r2, #16
 8002bd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e030      	b.n	8002c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7fe fca4 	bl	8001548 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11d      	bne.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d016      	beq.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e007      	b.n	8002c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d1ae      	bne.n	8002bba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d11b      	bne.n	8002cb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e272      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8087 	beq.w	8002df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce4:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d00c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf0:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d112      	bne.n	8002d22 <HAL_RCC_OscConfig+0x5e>
 8002cfc:	4b8c      	ldr	r3, [pc, #560]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d10b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	4b89      	ldr	r3, [pc, #548]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d06c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x12c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d168      	bne.n	8002df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e24c      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x76>
 8002d2c:	4b80      	ldr	r3, [pc, #512]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7f      	ldr	r2, [pc, #508]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e02e      	b.n	8002d98 <HAL_RCC_OscConfig+0xd4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x98>
 8002d42:	4b7b      	ldr	r3, [pc, #492]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7a      	ldr	r2, [pc, #488]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b78      	ldr	r3, [pc, #480]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a77      	ldr	r2, [pc, #476]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xd4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0xbc>
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a71      	ldr	r2, [pc, #452]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xd4>
 8002d80:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6a      	ldr	r2, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a67      	ldr	r2, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fbd2 	bl	8001548 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fbce 	bl	8001548 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e200      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe4>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fbbe 	bl	8001548 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fbba 	bl	8001548 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1ec      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x10c>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x18c>
 8002e16:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x176>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1c0      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4939      	ldr	r1, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e03a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fb73 	bl	8001548 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fb6f 	bl	8001548 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1a1      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fb52 	bl	8001548 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fb4e 	bl	8001548 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e180      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03a      	beq.n	8002f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d019      	beq.n	8002f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <HAL_RCC_OscConfig+0x274>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fb32 	bl	8001548 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fb2e 	bl	8001548 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e160      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f000 face 	bl	80034a8 <RCC_Delay>
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_OscConfig+0x274>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fe fb18 	bl	8001548 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1a:	e00f      	b.n	8002f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fb14 	bl	8001548 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d908      	bls.n	8002f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e146      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	42420000 	.word	0x42420000
 8002f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b92      	ldr	r3, [pc, #584]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e9      	bne.n	8002f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a6 	beq.w	80030a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a87      	ldr	r2, [pc, #540]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	61d3      	str	r3, [r2, #28]
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b82      	ldr	r3, [pc, #520]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7e      	ldr	r2, [pc, #504]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fad5 	bl	8001548 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fe fad1 	bl	8001548 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e103      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b75      	ldr	r3, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x312>
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e02d      	b.n	8003032 <HAL_RCC_OscConfig+0x36e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x334>
 8002fde:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a69      	ldr	r2, [pc, #420]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	4b67      	ldr	r3, [pc, #412]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a66      	ldr	r2, [pc, #408]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	e01c      	b.n	8003032 <HAL_RCC_OscConfig+0x36e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x356>
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a60      	ldr	r2, [pc, #384]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	4b5e      	ldr	r3, [pc, #376]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4a5d      	ldr	r2, [pc, #372]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6213      	str	r3, [r2, #32]
 8003018:	e00b      	b.n	8003032 <HAL_RCC_OscConfig+0x36e>
 800301a:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a5a      	ldr	r2, [pc, #360]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	4b58      	ldr	r3, [pc, #352]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a57      	ldr	r2, [pc, #348]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d015      	beq.n	8003066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7fe fa85 	bl	8001548 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fe fa81 	bl	8001548 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0b1      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ee      	beq.n	8003042 <HAL_RCC_OscConfig+0x37e>
 8003064:	e014      	b.n	8003090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fe fa6f 	bl	8001548 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fa6b 	bl	8001548 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e09b      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ee      	bne.n	800306e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4a3b      	ldr	r2, [pc, #236]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8087 	beq.w	80031ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d061      	beq.n	800317c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d146      	bne.n	800314e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_RCC_OscConfig+0x4cc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe fa3f 	bl	8001548 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe fa3b 	bl	8001548 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e06d      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e0:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d108      	bne.n	8003108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4921      	ldr	r1, [pc, #132]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a19      	ldr	r1, [r3, #32]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	430b      	orrs	r3, r1
 800311a:	491b      	ldr	r1, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x4cc>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fe fa0f 	bl	8001548 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312e:	f7fe fa0b 	bl	8001548 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e03d      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x46a>
 800314c:	e035      	b.n	80031ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_RCC_OscConfig+0x4cc>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe f9f8 	bl	8001548 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe f9f4 	bl	8001548 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e026      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x498>
 800317a:	e01e      	b.n	80031ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e019      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
 8003188:	40021000 	.word	0x40021000
 800318c:	40007000 	.word	0x40007000
 8003190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_OscConfig+0x500>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000

080031c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d0      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4965      	ldr	r1, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800322e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d040      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d115      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e073      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fe f946 	bl	8001548 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fe f942 	bl	8001548 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e053      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d210      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4922      	ldr	r1, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1cc>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe f8a4 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40022000 	.word	0x40022000
 800338c:	40021000 	.word	0x40021000
 8003390:	08005840 	.word	0x08005840
 8003394:	20000000 	.word	0x20000000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_GetSysClockFreq+0x94>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x30>
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x36>
 80033ca:	e027      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ce:	613b      	str	r3, [r7, #16]
      break;
 80033d0:	e027      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0c9b      	lsrs	r3, r3, #18
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_GetSysClockFreq+0x94>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0c5b      	lsrs	r3, r3, #17
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_RCC_GetSysClockFreq+0xa0>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fe:	fb03 f202 	mul.w	r2, r3, r2
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e004      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	613b      	str	r3, [r7, #16]
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetSysClockFreq+0x98>)
 800341e:	613b      	str	r3, [r7, #16]
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	693b      	ldr	r3, [r7, #16]
}
 8003424:	4618      	mov	r0, r3
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	007a1200 	.word	0x007a1200
 8003438:	08005858 	.word	0x08005858
 800343c:	08005868 	.word	0x08005868
 8003440:	003d0900 	.word	0x003d0900

08003444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b02      	ldr	r3, [pc, #8]	; (8003454 <HAL_RCC_GetHCLKFreq+0x10>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	20000000 	.word	0x20000000

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800345c:	f7ff fff2 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	08005850 	.word	0x08005850

08003480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003484:	f7ff ffde 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0adb      	lsrs	r3, r3, #11
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08005850 	.word	0x08005850

080034a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <RCC_Delay+0x34>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <RCC_Delay+0x38>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	0a5b      	lsrs	r3, r3, #9
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034c4:	bf00      	nop
  }
  while (Delay --);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e5a      	subs	r2, r3, #1
 80034ca:	60fa      	str	r2, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f9      	bne.n	80034c4 <RCC_Delay+0x1c>
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	20000000 	.word	0x20000000
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e041      	b.n	800357a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fe9a 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 fa74 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e03a      	b.n	8003612 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_TIM_Base_Start_IT+0x98>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x58>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x58>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_TIM_Base_Start_IT+0x9c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x58>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_TIM_Base_Start_IT+0xa0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d111      	bne.n	8003600 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d010      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e007      	b.n	8003610 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0202 	mvn.w	r2, #2
 8003654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9b4 	bl	80039d8 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9a7 	bl	80039c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f9b6 	bl	80039ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0204 	mvn.w	r2, #4
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f98a 	bl	80039d8 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f97d 	bl	80039c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f98c 	bl	80039ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0208 	mvn.w	r2, #8
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2204      	movs	r2, #4
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f960 	bl	80039d8 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f953 	bl	80039c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f962 	bl	80039ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b10      	cmp	r3, #16
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b10      	cmp	r3, #16
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0210 	mvn.w	r2, #16
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2208      	movs	r2, #8
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f936 	bl	80039d8 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f929 	bl	80039c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f938 	bl	80039ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d10e      	bne.n	80037ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0201 	mvn.w	r2, #1
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fa18 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b80      	cmp	r3, #128	; 0x80
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa7b 	bl	8003cce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8fc 	bl	80039fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b20      	cmp	r3, #32
 8003810:	d10e      	bne.n	8003830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b20      	cmp	r3, #32
 800381e:	d107      	bne.n	8003830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0220 	mvn.w	r2, #32
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa46 	bl	8003cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIM_ConfigClockSource+0x1c>
 8003850:	2302      	movs	r3, #2
 8003852:	e0b4      	b.n	80039be <HAL_TIM_ConfigClockSource+0x186>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d03e      	beq.n	800390c <HAL_TIM_ConfigClockSource+0xd4>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	f200 8087 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	f000 8086 	beq.w	80039aa <HAL_TIM_ConfigClockSource+0x172>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a2:	d87f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b70      	cmp	r3, #112	; 0x70
 80038a6:	d01a      	beq.n	80038de <HAL_TIM_ConfigClockSource+0xa6>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d87b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b60      	cmp	r3, #96	; 0x60
 80038ae:	d050      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x11a>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d877      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b50      	cmp	r3, #80	; 0x50
 80038b6:	d03c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xfa>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d873      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d058      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x13a>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d86f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d064      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d86b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d060      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d867      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d05a      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	e062      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f000 f968 	bl	8003bc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	609a      	str	r2, [r3, #8]
      break;
 800390a:	e04f      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f000 f951 	bl	8003bc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e03c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	461a      	mov	r2, r3
 8003940:	f000 f8c8 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2150      	movs	r1, #80	; 0x50
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f91f 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 8003950:	e02c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	461a      	mov	r2, r3
 8003960:	f000 f8e6 	bl	8003b30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2160      	movs	r1, #96	; 0x60
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f90f 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 8003970:	e01c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	461a      	mov	r2, r3
 8003980:	f000 f8a8 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8ff 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 8003990:	e00c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f000 f8f6 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80039a2:	e003      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e000      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
	...

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <TIM_Base_SetConfig+0xb8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <TIM_Base_SetConfig+0x30>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x30>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <TIM_Base_SetConfig+0xbc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x30>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <TIM_Base_SetConfig+0xc0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <TIM_Base_SetConfig+0xb8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d007      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a19      	ldr	r2, [pc, #100]	; (8003acc <TIM_Base_SetConfig+0xbc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <TIM_Base_SetConfig+0xc0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <TIM_Base_SetConfig+0xb8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	615a      	str	r2, [r3, #20]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800

08003ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0201 	bic.w	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 030a 	bic.w	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0210 	bic.w	r2, r3, #16
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	031b      	lsls	r3, r3, #12
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f043 0307 	orr.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b087      	sub	sp, #28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	021a      	lsls	r2, r3, #8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e046      	b.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d009      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10c      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800

08003cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e042      	b.n	8003d78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd fac0 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fdc5 	bl	80048b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d16d      	bne.n	8003e7c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_UART_Transmit+0x2c>
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e066      	b.n	8003e7e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2221      	movs	r2, #33	; 0x21
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dbe:	f7fd fbc3 	bl	8001548 <HAL_GetTick>
 8003dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d108      	bne.n	8003dec <HAL_UART_Transmit+0x6c>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	e003      	b.n	8003df4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df4:	e02a      	b.n	8003e4c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fb14 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e036      	b.n	8003e7e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e007      	b.n	8003e3e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cf      	bne.n	8003df6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fae4 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d112      	bne.n	8003ec6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Receive_IT+0x26>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e00b      	b.n	8003ec8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fb24 	bl	800450a <UART_Start_Receive_IT>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	e000      	b.n	8003ec8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0ba      	sub	sp, #232	; 0xe8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_UART_IRQHandler+0x66>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fc01 	bl	8004736 <UART_Receive_IT>
      return;
 8003f34:	e25b      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80de 	beq.w	80040fc <HAL_UART_IRQHandler+0x22c>
 8003f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80d1 	beq.w	80040fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xae>
 8003f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xd2>
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xf6>
 8003fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x126>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0208 	orr.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 81f2 	beq.w	80043e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x14e>
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb8c 	bl	8004736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_UART_IRQHandler+0x17a>
 8004042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04f      	beq.n	80040ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa96 	bl	800457c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d041      	beq.n	80040e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800408a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800408e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1d9      	bne.n	800405e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d013      	beq.n	80040da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	4a7e      	ldr	r2, [pc, #504]	; (80042b0 <HAL_UART_IRQHandler+0x3e0>)
 80040b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd fbb8 	bl	8001834 <HAL_DMA_Abort_IT>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040d4:	4610      	mov	r0, r2
 80040d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00e      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f993 	bl	8004406 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00a      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f98f 	bl	8004406 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e006      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f98b 	bl	8004406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80040f6:	e175      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	bf00      	nop
    return;
 80040fa:	e173      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 814f 	bne.w	80043a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8148 	beq.w	80043a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8141 	beq.w	80043a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80b6 	beq.w	80042b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8145 	beq.w	80043e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004166:	429a      	cmp	r2, r3
 8004168:	f080 813e 	bcs.w	80043e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004172:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b20      	cmp	r3, #32
 800417c:	f000 8088 	beq.w	8004290 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1d9      	bne.n	8004180 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e1      	bne.n	80041cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800422c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800422e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800423a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800425e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004272:	65ba      	str	r2, [r7, #88]	; 0x58
 8004274:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e3      	bne.n	800424e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd fa97 	bl	80017be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8b6 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ac:	e09c      	b.n	80043e8 <HAL_UART_IRQHandler+0x518>
 80042ae:	bf00      	nop
 80042b0:	08004641 	.word	0x08004641
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 808e 	beq.w	80043ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8089 	beq.w	80043ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e3      	bne.n	80042da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	623b      	str	r3, [r7, #32]
   return(result);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004336:	633a      	str	r2, [r7, #48]	; 0x30
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800433c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e3      	bne.n	8004312 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	60fb      	str	r3, [r7, #12]
   return(result);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800437c:	61fa      	str	r2, [r7, #28]
 800437e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	617b      	str	r3, [r7, #20]
   return(result);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e3      	bne.n	8004358 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f83b 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a2:	e023      	b.n	80043ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_UART_IRQHandler+0x4f4>
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f953 	bl	8004668 <UART_Transmit_IT>
    return;
 80043c2:	e014      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <HAL_UART_IRQHandler+0x51e>
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f992 	bl	8004706 <UART_EndTransmit_IT>
    return;
 80043e2:	e004      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
    return;
 80043e4:	bf00      	nop
 80043e6:	e002      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
      return;
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
      return;
 80043ec:	bf00      	nop
  }
}
 80043ee:	37e8      	adds	r7, #232	; 0xe8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b090      	sub	sp, #64	; 0x40
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	e050      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d04c      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x30>
 800444e:	f7fd f87b 	bl	8001548 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445a:	429a      	cmp	r2, r3
 800445c:	d241      	bcs.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800447e:	637a      	str	r2, [r7, #52]	; 0x34
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	613b      	str	r3, [r7, #16]
   return(result);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b2:	623a      	str	r2, [r7, #32]
 80044b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	69f9      	ldr	r1, [r7, #28]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d09f      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3740      	adds	r7, #64	; 0x40
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	4613      	mov	r3, r2
 8004516:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	; 0x22
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0220 	orr.w	r2, r2, #32
 800456e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b095      	sub	sp, #84	; 0x54
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a4:	643a      	str	r2, [r7, #64]	; 0x40
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3314      	adds	r3, #20
 80045d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d119      	bne.n	8004628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	60bb      	str	r3, [r7, #8]
   return(result);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 0310 	bic.w	r3, r3, #16
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004614:	61ba      	str	r2, [r7, #24]
 8004616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	613b      	str	r3, [r7, #16]
   return(result);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004636:	bf00      	nop
 8004638:	3754      	adds	r7, #84	; 0x54
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fed3 	bl	8004406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b21      	cmp	r3, #33	; 0x21
 800467a:	d13e      	bne.n	80046fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d114      	bne.n	80046b0 <UART_Transmit_IT+0x48>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]
 80046ae:	e008      	b.n	80046c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6211      	str	r1, [r2, #32]
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4619      	mov	r1, r3
 80046d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fe64 	bl	80043f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b08c      	sub	sp, #48	; 0x30
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b22      	cmp	r3, #34	; 0x22
 8004748:	f040 80ae 	bne.w	80048a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d117      	bne.n	8004786 <UART_Receive_IT+0x50>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d113      	bne.n	8004786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004774:	b29a      	uxth	r2, r3
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	1c9a      	adds	r2, r3, #2
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
 8004784:	e026      	b.n	80047d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d007      	beq.n	80047aa <UART_Receive_IT+0x74>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <UART_Receive_IT+0x82>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e008      	b.n	80047ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4619      	mov	r1, r3
 80047e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d15d      	bne.n	80048a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0220 	bic.w	r2, r2, #32
 80047f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	2b01      	cmp	r3, #1
 800482c:	d135      	bne.n	800489a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	613b      	str	r3, [r7, #16]
   return(result);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f023 0310 	bic.w	r3, r3, #16
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004854:	623a      	str	r2, [r7, #32]
 8004856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	69f9      	ldr	r1, [r7, #28]
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	61bb      	str	r3, [r7, #24]
   return(result);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b10      	cmp	r3, #16
 8004874:	d10a      	bne.n	800488c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fdc0 	bl	8004418 <HAL_UARTEx_RxEventCallback>
 8004898:	e002      	b.n	80048a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc f984 	bl	8000ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e002      	b.n	80048aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3730      	adds	r7, #48	; 0x30
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048ee:	f023 030c 	bic.w	r3, r3, #12
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <UART_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7fe fdb0 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	e002      	b.n	800492a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe fd98 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8004928:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <UART_SetConfig+0x118>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	0119      	lsls	r1, r3, #4
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <UART_SetConfig+0x118>)
 8004962:	fba3 0302 	umull	r0, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2064      	movs	r0, #100	; 0x64
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	; 0x32
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004980:	4419      	add	r1, r3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f2f3 	udiv	r2, r2, r3
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <UART_SetConfig+0x118>)
 800499a:	fba3 0302 	umull	r0, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2064      	movs	r0, #100	; 0x64
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <UART_SetConfig+0x118>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	440a      	add	r2, r1
 80049be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40013800 	.word	0x40013800
 80049cc:	51eb851f 	.word	0x51eb851f

080049d0 <HC595_AssignPin>:
 */
#include "74HC595.h"

HC595 *_hc595 = NULL;
HC595_Status_t HC595_AssignPin(HC595* hc595,GPIO_TypeDef *port,uint16_t pin, pinName pinName)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	460b      	mov	r3, r1
 80049e0:	80fb      	strh	r3, [r7, #6]
 80049e2:	4613      	mov	r3, r2
 80049e4:	717b      	strb	r3, [r7, #5]
	if(!hc595) return HC595_INVALID_ARG;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HC595_AssignPin+0x20>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e02d      	b.n	8004a4c <HC595_AssignPin+0x7c>
	switch(pinName){
 80049f0:	797b      	ldrb	r3, [r7, #5]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d826      	bhi.n	8004a44 <HC595_AssignPin+0x74>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <HC595_AssignPin+0x2c>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a0d 	.word	0x08004a0d
 8004a04:	08004a1b 	.word	0x08004a1b
 8004a08:	08004a37 	.word	0x08004a37
	case HC595_CLK:
		hc595->clk.port = port;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	609a      	str	r2, [r3, #8]
		hc595->clk.pin = pin;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	819a      	strh	r2, [r3, #12]
		break;
 8004a18:	e014      	b.n	8004a44 <HC595_AssignPin+0x74>
	case HC595_DS:
		hc595->ds.port = port;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	601a      	str	r2, [r3, #0]
		hc595->ds.pin = pin;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	809a      	strh	r2, [r3, #4]
		break;
 8004a26:	e00d      	b.n	8004a44 <HC595_AssignPin+0x74>
	case HC595_LATCH:
		hc595->latch.port = port;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	611a      	str	r2, [r3, #16]
		hc595->latch.pin = pin;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	829a      	strh	r2, [r3, #20]
		break;
 8004a34:	e006      	b.n	8004a44 <HC595_AssignPin+0x74>
	case HC595_OE:
		hc595->oe.port = port;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	619a      	str	r2, [r3, #24]
		hc595->oe.pin = pin;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	839a      	strh	r2, [r3, #28]
		break;
 8004a42:	bf00      	nop
	}
	_hc595 = hc595;
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HC595_AssignPin+0x88>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6013      	str	r3, [r2, #0]
	return HC595_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	200001d4 	.word	0x200001d4

08004a5c <ByteSlitting>:
    }
    return result;
}

static inline void ByteSlitting(uint32_t value, uint8_t *byte_array, bool LSB_FIRST)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 4; i++){
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	75fb      	strb	r3, [r7, #23]
 8004a6e:	e016      	b.n	8004a9e <ByteSlitting+0x42>
        uint8_t index = LSB_FIRST ? i : (3 - i);
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <ByteSlitting+0x1e>
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	e003      	b.n	8004a82 <ByteSlitting+0x26>
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	f1c3 0303 	rsb	r3, r3, #3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	75bb      	strb	r3, [r7, #22]
        byte_array[index] = (uint8_t)((value >> (8 * i)) & 0xFF);
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	fa22 f103 	lsr.w	r1, r2, r3
 8004a8e:	7dbb      	ldrb	r3, [r7, #22]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4413      	add	r3, r2
 8004a94:	b2ca      	uxtb	r2, r1
 8004a96:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++){
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d9e5      	bls.n	8004a70 <ByteSlitting+0x14>
    }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HC595_ShiftOut>:
 * @param n Number of cascaded 74HC595 shift registers.
 * @param MSB_FIRST send MSB byte to the last HC595[n]
 * @return HC595_Status_t status code indicating the result of the operation.
 */
HC595_Status_t HC595_ShiftOut(uint8_t *dt,uint8_t n,uint8_t MSB_FIRST)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
 8004abc:	4613      	mov	r3, r2
 8004abe:	70bb      	strb	r3, [r7, #2]
	if(!_hc595 && !n) return HC595_INVALID_ARG;
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <HC595_ShiftOut+0x22>
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HC595_ShiftOut+0x22>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e089      	b.n	8004be6 <HC595_ShiftOut+0x136>
	if(n > HC595_MAX_CASCADE) return HC595_BEYOND_MAX_CASCADE;
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d901      	bls.n	8004adc <HC595_ShiftOut+0x2c>
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e084      	b.n	8004be6 <HC595_ShiftOut+0x136>
	// Use internal buffer to shift out if dt is NULL
	uint8_t a;
	if(!dt && n < 5) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d113      	bne.n	8004b0a <HC595_ShiftOut+0x5a>
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d810      	bhi.n	8004b0a <HC595_ShiftOut+0x5a>
	    uint8_t Temp[4];
	    ByteSlitting(_hc595->data,Temp,MSB_FIRST);
 8004ae8:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6a18      	ldr	r0, [r3, #32]
 8004aee:	78bb      	ldrb	r3, [r7, #2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	f107 0308 	add.w	r3, r7, #8
 8004afe:	4619      	mov	r1, r3
 8004b00:	f7ff ffac 	bl	8004a5c <ByteSlitting>
	    dt = Temp;
 8004b04:	f107 0308 	add.w	r3, r7, #8
 8004b08:	607b      	str	r3, [r7, #4]
	}
	a = *(dt+(n-1));
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	73fb      	strb	r3, [r7, #15]
	for(int8_t i=(n*8)-1; i > -1; i--){
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	73bb      	strb	r3, [r7, #14]
 8004b22:	e047      	b.n	8004bb4 <HC595_ShiftOut+0x104>
	    if(a&0x80) HC595_WRITE(HC595_DS,1);
 8004b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da0a      	bge.n	8004b42 <HC595_ShiftOut+0x92>
 8004b2c:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	4b2f      	ldr	r3, [pc, #188]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	889b      	ldrh	r3, [r3, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f7fd f876 	bl	8001c2c <HAL_GPIO_WritePin>
 8004b40:	e009      	b.n	8004b56 <HC595_ShiftOut+0xa6>
	    else HC595_WRITE(HC595_DS,0);
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	889b      	ldrh	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4619      	mov	r1, r3
 8004b52:	f7fd f86b 	bl	8001c2c <HAL_GPIO_WritePin>
		HC595_WRITE(HC595_CLK,1);
 8004b56:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6898      	ldr	r0, [r3, #8]
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	899b      	ldrh	r3, [r3, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	4619      	mov	r1, r3
 8004b66:	f7fd f861 	bl	8001c2c <HAL_GPIO_WritePin>
		HC595_WRITE(HC595_CLK,0);
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6898      	ldr	r0, [r3, #8]
 8004b70:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	899b      	ldrh	r3, [r3, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f7fd f857 	bl	8001c2c <HAL_GPIO_WritePin>
		a <<= 1;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
	    if(i%8 == 0) {
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <HC595_ShiftOut+0xf8>
	        a = *(dt+(i/8-1));
 8004b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da00      	bge.n	8004b9a <HC595_ShiftOut+0xea>
 8004b98:	3307      	adds	r3, #7
 8004b9a:	10db      	asrs	r3, r3, #3
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	73fb      	strb	r3, [r7, #15]
	for(int8_t i=(n*8)-1; i > -1; i--){
 8004ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	73bb      	strb	r3, [r7, #14]
 8004bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dab3      	bge.n	8004b24 <HC595_ShiftOut+0x74>
//		uint8_t bit_trans = (a & (0x80>>i))>>(7-i);
//		HC595_WRITE(HC595_DS,bit_trans);
//		HC595_WRITE(HC595_CLK,0);
//		HC595_WRITE(HC595_CLK,1);
//	}
	HC595_WRITE(HC595_LATCH,1);
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6918      	ldr	r0, [r3, #16]
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	8a9b      	ldrh	r3, [r3, #20]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fd f82e 	bl	8001c2c <HAL_GPIO_WritePin>
	HC595_WRITE(HC595_LATCH,0);
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6918      	ldr	r0, [r3, #16]
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HC595_ShiftOut+0x140>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	8a9b      	ldrh	r3, [r3, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7fd f824 	bl	8001c2c <HAL_GPIO_WritePin>
	return HC595_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200001d4 	.word	0x200001d4

08004bf4 <HC595_Enable>:
	HC595_WRITE(pinName,0);
	DELAY_MS(2000);
}

void HC595_Enable()
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
	HC595_WRITE(HC595_OE,0);
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HC595_Enable+0x1c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6998      	ldr	r0, [r3, #24]
 8004bfe:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <HC595_Enable+0x1c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	8b9b      	ldrh	r3, [r3, #28]
 8004c04:	2200      	movs	r2, #0
 8004c06:	4619      	mov	r1, r3
 8004c08:	f7fd f810 	bl	8001c2c <HAL_GPIO_WritePin>
}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	200001d4 	.word	0x200001d4

08004c14 <LCD_AssignPin>:
#include "LCD.h"

LCD *_LCD=NULL;

void LCD_AssignPin(LCD* LCD,uint8_t pin, LCD_pinName pinName)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
 8004c20:	4613      	mov	r3, r2
 8004c22:	70bb      	strb	r3, [r7, #2]
	switch(pinName){
 8004c24:	78bb      	ldrb	r3, [r7, #2]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	d832      	bhi.n	8004c90 <LCD_AssignPin+0x7c>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <LCD_AssignPin+0x1c>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c51 	.word	0x08004c51
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c71 	.word	0x08004c71
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004c89 	.word	0x08004c89
	case LCD_EN_PIN:
		LCD->en_pin = pin;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	701a      	strb	r2, [r3, #0]
		break;
 8004c56:	e01b      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_RS_PIN:
		LCD->rs_pin = pin;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	705a      	strb	r2, [r3, #1]
		break;
 8004c5e:	e017      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_RW_PIN:
		LCD->rw_pin = pin;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	709a      	strb	r2, [r3, #2]
		break;
 8004c66:	e013      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_BL_PIN:
		LCD->bl_pin = pin;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	70da      	strb	r2, [r3, #3]
		break;
 8004c6e:	e00f      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_DB4:
		LCD->d4_pin = pin;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	78fa      	ldrb	r2, [r7, #3]
 8004c74:	711a      	strb	r2, [r3, #4]
		break;
 8004c76:	e00b      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_DB5:
		LCD->d5_pin = pin;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	715a      	strb	r2, [r3, #5]
		break;
 8004c7e:	e007      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_DB6:
		LCD->d6_pin = pin;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	719a      	strb	r2, [r3, #6]
		break;
 8004c86:	e003      	b.n	8004c90 <LCD_AssignPin+0x7c>
	case LCD_DB7:
		LCD->d7_pin = pin;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	71da      	strb	r2, [r3, #7]
		break;
 8004c8e:	bf00      	nop
	}
	_LCD = LCD;
 8004c90:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <LCD_AssignPin+0x8c>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	200001d8 	.word	0x200001d8

08004ca4 <lcd_Init>:

void lcd_Init()
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
	// Khởi tạo 4 bit
	// 4 bit initialisation
	// Khởi tạo 4 bit
		HAL_Delay(50);
 8004ca8:	2032      	movs	r0, #50	; 0x32
 8004caa:	f7fc fc57 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x30);
 8004cae:	2030      	movs	r0, #48	; 0x30
 8004cb0:	f000 f836 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(5);
 8004cb4:	2005      	movs	r0, #5
 8004cb6:	f7fc fc51 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x30);
 8004cba:	2030      	movs	r0, #48	; 0x30
 8004cbc:	f000 f830 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(1);
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	f7fc fc4b 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x30);
 8004cc6:	2030      	movs	r0, #48	; 0x30
 8004cc8:	f000 f82a 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(10);
 8004ccc:	200a      	movs	r0, #10
 8004cce:	f7fc fc45 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x20);
 8004cd2:	2020      	movs	r0, #32
 8004cd4:	f000 f824 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(10);
 8004cd8:	200a      	movs	r0, #10
 8004cda:	f7fc fc3f 	bl	800155c <HAL_Delay>
		// Khởi tạo hiển thị
		//00 00 101 00
		lcd_send_cmd(0x28); //function set bảng 6/tr23: set data interface 4bits 2lines 5x8 bit
 8004cde:	2028      	movs	r0, #40	; 0x28
 8004ce0:	f000 f81e 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(1);
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f7fc fc39 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x08); //display on/off control
 8004cea:	2008      	movs	r0, #8
 8004cec:	f000 f818 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(1);
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f7fc fc33 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x01); //clear display
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f000 f812 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(1);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7fc fc2d 	bl	800155c <HAL_Delay>
		HAL_Delay(1);
 8004d02:	2001      	movs	r0, #1
 8004d04:	f7fc fc2a 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x06); //entry mode set: i/d=1 increment s=0
 8004d08:	2006      	movs	r0, #6
 8004d0a:	f000 f809 	bl	8004d20 <lcd_send_cmd>
		HAL_Delay(1);
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f7fc fc24 	bl	800155c <HAL_Delay>
		lcd_send_cmd(0x0C); // cho phep hien thi man hinh
 8004d14:	200c      	movs	r0, #12
 8004d16:	f000 f803 	bl	8004d20 <lcd_send_cmd>
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l; // vi du 0x30
	uint8_t data_t[4];
	data_u = (cmd >> 4) & 0x0f; // data_u =0x03
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	74fb      	strb	r3, [r7, #19]
	data_l = (cmd & 0x0f); // data_l = 0x00
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	4a81      	ldr	r2, [pc, #516]	; (8004f44 <lcd_send_cmd+0x224>)
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	7912      	ldrb	r2, [r2, #4]
 8004d44:	4093      	lsls	r3, r2
 8004d46:	b25a      	sxtb	r2, r3
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	f003 0102 	and.w	r1, r3, #2
 8004d4e:	4b7d      	ldr	r3, [pc, #500]	; (8004f44 <lcd_send_cmd+0x224>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	795b      	ldrb	r3, [r3, #5]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	b25a      	sxtb	r2, r3
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	f003 0104 	and.w	r1, r3, #4
 8004d66:	4b77      	ldr	r3, [pc, #476]	; (8004f44 <lcd_send_cmd+0x224>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	799b      	ldrb	r3, [r3, #6]
 8004d6c:	3b02      	subs	r3, #2
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	b25b      	sxtb	r3, r3
 8004d74:	4313      	orrs	r3, r2
 8004d76:	b25a      	sxtb	r2, r3
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	f003 0108 	and.w	r1, r3, #8
 8004d7e:	4b71      	ldr	r3, [pc, #452]	; (8004f44 <lcd_send_cmd+0x224>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	79db      	ldrb	r3, [r3, #7]
 8004d84:	3b03      	subs	r3, #3
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	b25a      	sxtb	r2, r3
 8004d90:	4b6c      	ldr	r3, [pc, #432]	; (8004f44 <lcd_send_cmd+0x224>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	2301      	movs	r3, #1
 8004d9a:	408b      	lsls	r3, r1
 8004d9c:	b25b      	sxtb	r3, r3
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b25a      	sxtb	r2, r3
 8004da2:	4b68      	ldr	r3, [pc, #416]	; (8004f44 <lcd_send_cmd+0x224>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	78db      	ldrb	r3, [r3, #3]
 8004da8:	4619      	mov	r1, r3
 8004daa:	2301      	movs	r3, #1
 8004dac:	408b      	lsls	r3, r1
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b25b      	sxtb	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	733b      	strb	r3, [r7, #12]
	data_t[1] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	4a61      	ldr	r2, [pc, #388]	; (8004f44 <lcd_send_cmd+0x224>)
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	7912      	ldrb	r2, [r2, #4]
 8004dc4:	4093      	lsls	r3, r2
 8004dc6:	b25a      	sxtb	r2, r3
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	f003 0102 	and.w	r1, r3, #2
 8004dce:	4b5d      	ldr	r3, [pc, #372]	; (8004f44 <lcd_send_cmd+0x224>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	795b      	ldrb	r3, [r3, #5]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b25a      	sxtb	r2, r3
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	f003 0104 	and.w	r1, r3, #4
 8004de6:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <lcd_send_cmd+0x224>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	799b      	ldrb	r3, [r3, #6]
 8004dec:	3b02      	subs	r3, #2
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	4313      	orrs	r3, r2
 8004df6:	b25a      	sxtb	r2, r3
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	f003 0108 	and.w	r1, r3, #8
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	79db      	ldrb	r3, [r3, #7]
 8004e04:	3b03      	subs	r3, #3
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	b25a      	sxtb	r2, r3
 8004e10:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	78db      	ldrb	r3, [r3, #3]
 8004e16:	4619      	mov	r1, r3
 8004e18:	2301      	movs	r3, #1
 8004e1a:	408b      	lsls	r3, r1
 8004e1c:	b25b      	sxtb	r3, r3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	737b      	strb	r3, [r7, #13]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8004e26:	7cbb      	ldrb	r3, [r7, #18]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	4a45      	ldr	r2, [pc, #276]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	7912      	ldrb	r2, [r2, #4]
 8004e32:	4093      	lsls	r3, r2
 8004e34:	b25a      	sxtb	r2, r3
 8004e36:	7cbb      	ldrb	r3, [r7, #18]
 8004e38:	f003 0102 	and.w	r1, r3, #2
 8004e3c:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	795b      	ldrb	r3, [r3, #5]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b25a      	sxtb	r2, r3
 8004e4e:	7cbb      	ldrb	r3, [r7, #18]
 8004e50:	f003 0104 	and.w	r1, r3, #4
 8004e54:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	799b      	ldrb	r3, [r3, #6]
 8004e5a:	3b02      	subs	r3, #2
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	b25b      	sxtb	r3, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b25a      	sxtb	r2, r3
 8004e66:	7cbb      	ldrb	r3, [r7, #18]
 8004e68:	f003 0108 	and.w	r1, r3, #8
 8004e6c:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	79db      	ldrb	r3, [r3, #7]
 8004e72:	3b03      	subs	r3, #3
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	b25b      	sxtb	r3, r3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b25a      	sxtb	r2, r3
 8004e7e:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	4619      	mov	r1, r3
 8004e86:	2301      	movs	r3, #1
 8004e88:	408b      	lsls	r3, r1
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b25a      	sxtb	r2, r3
 8004e90:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <lcd_send_cmd+0x224>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	78db      	ldrb	r3, [r3, #3]
 8004e96:	4619      	mov	r1, r3
 8004e98:	2301      	movs	r3, #1
 8004e9a:	408b      	lsls	r3, r1
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8004ea6:	7cbb      	ldrb	r3, [r7, #18]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <lcd_send_cmd+0x224>)
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	7912      	ldrb	r2, [r2, #4]
 8004eb2:	4093      	lsls	r3, r2
 8004eb4:	b25a      	sxtb	r2, r3
 8004eb6:	7cbb      	ldrb	r3, [r7, #18]
 8004eb8:	f003 0102 	and.w	r1, r3, #2
 8004ebc:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <lcd_send_cmd+0x224>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	795b      	ldrb	r3, [r3, #5]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b25a      	sxtb	r2, r3
 8004ece:	7cbb      	ldrb	r3, [r7, #18]
 8004ed0:	f003 0104 	and.w	r1, r3, #4
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <lcd_send_cmd+0x224>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	799b      	ldrb	r3, [r3, #6]
 8004eda:	3b02      	subs	r3, #2
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b25a      	sxtb	r2, r3
 8004ee6:	7cbb      	ldrb	r3, [r7, #18]
 8004ee8:	f003 0108 	and.w	r1, r3, #8
 8004eec:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <lcd_send_cmd+0x224>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	79db      	ldrb	r3, [r3, #7]
 8004ef2:	3b03      	subs	r3, #3
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b25a      	sxtb	r2, r3
 8004efe:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <lcd_send_cmd+0x224>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	78db      	ldrb	r3, [r3, #3]
 8004f04:	4619      	mov	r1, r3
 8004f06:	2301      	movs	r3, #1
 8004f08:	408b      	lsls	r3, r1
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	73fb      	strb	r3, [r7, #15]

	for(int i = 0;i<4;i++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e00b      	b.n	8004f32 <lcd_send_cmd+0x212>
	{
		HC595_ShiftOut(data_t+i,1,0);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f107 020c 	add.w	r2, r7, #12
 8004f20:	4413      	add	r3, r2
 8004f22:	2200      	movs	r2, #0
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fdc2 	bl	8004ab0 <HC595_ShiftOut>
	for(int i = 0;i<4;i++)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	ddf0      	ble.n	8004f1a <lcd_send_cmd+0x1fa>
	}
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200001d8 	.word	0x200001d8

08004f48 <lcd_Send_Data>:

void lcd_Send_Data(char data)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
	char data_u,data_l;
	uint8_t data_t[4];
	data_u = (data >> 4) & 0x0f;
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	74fb      	strb	r3, [r7, #19]
	data_l = (data & 0x0f);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	74bb      	strb	r3, [r7, #18]
	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	4a93      	ldr	r2, [pc, #588]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	7912      	ldrb	r2, [r2, #4]
 8004f6c:	4093      	lsls	r3, r2
 8004f6e:	b25a      	sxtb	r2, r3
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	f003 0102 	and.w	r1, r3, #2
 8004f76:	4b8f      	ldr	r3, [pc, #572]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	795b      	ldrb	r3, [r3, #5]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b25a      	sxtb	r2, r3
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	f003 0104 	and.w	r1, r3, #4
 8004f8e:	4b89      	ldr	r3, [pc, #548]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	799b      	ldrb	r3, [r3, #6]
 8004f94:	3b02      	subs	r3, #2
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b25a      	sxtb	r2, r3
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	f003 0108 	and.w	r1, r3, #8
 8004fa6:	4b83      	ldr	r3, [pc, #524]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	79db      	ldrb	r3, [r3, #7]
 8004fac:	3b03      	subs	r3, #3
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	b25b      	sxtb	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b25a      	sxtb	r2, r3
 8004fb8:	4b7e      	ldr	r3, [pc, #504]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	408b      	lsls	r3, r1
 8004fc4:	b25b      	sxtb	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b25a      	sxtb	r2, r3
 8004fca:	4b7a      	ldr	r3, [pc, #488]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	408b      	lsls	r3, r1
 8004fd6:	b25b      	sxtb	r3, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b25a      	sxtb	r2, r3
 8004fdc:	4b75      	ldr	r3, [pc, #468]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	78db      	ldrb	r3, [r3, #3]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	408b      	lsls	r3, r1
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	733b      	strb	r3, [r7, #12]
	data_t[1] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	4a6e      	ldr	r2, [pc, #440]	; (80051b4 <lcd_Send_Data+0x26c>)
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	7912      	ldrb	r2, [r2, #4]
 8004ffe:	4093      	lsls	r3, r2
 8005000:	b25a      	sxtb	r2, r3
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	f003 0102 	and.w	r1, r3, #2
 8005008:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <lcd_Send_Data+0x26c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	795b      	ldrb	r3, [r3, #5]
 800500e:	3b01      	subs	r3, #1
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	b25b      	sxtb	r3, r3
 8005016:	4313      	orrs	r3, r2
 8005018:	b25a      	sxtb	r2, r3
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	f003 0104 	and.w	r1, r3, #4
 8005020:	4b64      	ldr	r3, [pc, #400]	; (80051b4 <lcd_Send_Data+0x26c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	799b      	ldrb	r3, [r3, #6]
 8005026:	3b02      	subs	r3, #2
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	b25b      	sxtb	r3, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	b25a      	sxtb	r2, r3
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	f003 0108 	and.w	r1, r3, #8
 8005038:	4b5e      	ldr	r3, [pc, #376]	; (80051b4 <lcd_Send_Data+0x26c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	79db      	ldrb	r3, [r3, #7]
 800503e:	3b03      	subs	r3, #3
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	b25b      	sxtb	r3, r3
 8005046:	4313      	orrs	r3, r2
 8005048:	b25a      	sxtb	r2, r3
 800504a:	4b5a      	ldr	r3, [pc, #360]	; (80051b4 <lcd_Send_Data+0x26c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	4619      	mov	r1, r3
 8005052:	2301      	movs	r3, #1
 8005054:	408b      	lsls	r3, r1
 8005056:	b25b      	sxtb	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b25a      	sxtb	r2, r3
 800505c:	4b55      	ldr	r3, [pc, #340]	; (80051b4 <lcd_Send_Data+0x26c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	78db      	ldrb	r3, [r3, #3]
 8005062:	4619      	mov	r1, r3
 8005064:	2301      	movs	r3, #1
 8005066:	408b      	lsls	r3, r1
 8005068:	b25b      	sxtb	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b25b      	sxtb	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	737b      	strb	r3, [r7, #13]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8005072:	7cbb      	ldrb	r3, [r7, #18]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <lcd_Send_Data+0x26c>)
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	7912      	ldrb	r2, [r2, #4]
 800507e:	4093      	lsls	r3, r2
 8005080:	b25a      	sxtb	r2, r3
 8005082:	7cbb      	ldrb	r3, [r7, #18]
 8005084:	f003 0102 	and.w	r1, r3, #2
 8005088:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <lcd_Send_Data+0x26c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	795b      	ldrb	r3, [r3, #5]
 800508e:	3b01      	subs	r3, #1
 8005090:	fa01 f303 	lsl.w	r3, r1, r3
 8005094:	b25b      	sxtb	r3, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	b25a      	sxtb	r2, r3
 800509a:	7cbb      	ldrb	r3, [r7, #18]
 800509c:	f003 0104 	and.w	r1, r3, #4
 80050a0:	4b44      	ldr	r3, [pc, #272]	; (80051b4 <lcd_Send_Data+0x26c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	799b      	ldrb	r3, [r3, #6]
 80050a6:	3b02      	subs	r3, #2
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	b25b      	sxtb	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b25a      	sxtb	r2, r3
 80050b2:	7cbb      	ldrb	r3, [r7, #18]
 80050b4:	f003 0108 	and.w	r1, r3, #8
 80050b8:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <lcd_Send_Data+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	79db      	ldrb	r3, [r3, #7]
 80050be:	3b03      	subs	r3, #3
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	4313      	orrs	r3, r2
 80050c8:	b25a      	sxtb	r2, r3
 80050ca:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <lcd_Send_Data+0x26c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	2301      	movs	r3, #1
 80050d4:	408b      	lsls	r3, r1
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	4313      	orrs	r3, r2
 80050da:	b25a      	sxtb	r2, r3
 80050dc:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <lcd_Send_Data+0x26c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	4619      	mov	r1, r3
 80050e4:	2301      	movs	r3, #1
 80050e6:	408b      	lsls	r3, r1
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	b25a      	sxtb	r2, r3
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <lcd_Send_Data+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	78db      	ldrb	r3, [r3, #3]
 80050f4:	4619      	mov	r1, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	408b      	lsls	r3, r1
 80050fa:	b25b      	sxtb	r3, r3
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8005104:	7cbb      	ldrb	r3, [r7, #18]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <lcd_Send_Data+0x26c>)
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	7912      	ldrb	r2, [r2, #4]
 8005110:	4093      	lsls	r3, r2
 8005112:	b25a      	sxtb	r2, r3
 8005114:	7cbb      	ldrb	r3, [r7, #18]
 8005116:	f003 0102 	and.w	r1, r3, #2
 800511a:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <lcd_Send_Data+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	795b      	ldrb	r3, [r3, #5]
 8005120:	3b01      	subs	r3, #1
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	b25b      	sxtb	r3, r3
 8005128:	4313      	orrs	r3, r2
 800512a:	b25a      	sxtb	r2, r3
 800512c:	7cbb      	ldrb	r3, [r7, #18]
 800512e:	f003 0104 	and.w	r1, r3, #4
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <lcd_Send_Data+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	799b      	ldrb	r3, [r3, #6]
 8005138:	3b02      	subs	r3, #2
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	b25b      	sxtb	r3, r3
 8005140:	4313      	orrs	r3, r2
 8005142:	b25a      	sxtb	r2, r3
 8005144:	7cbb      	ldrb	r3, [r7, #18]
 8005146:	f003 0108 	and.w	r1, r3, #8
 800514a:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <lcd_Send_Data+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	79db      	ldrb	r3, [r3, #7]
 8005150:	3b03      	subs	r3, #3
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	b25b      	sxtb	r3, r3
 8005158:	4313      	orrs	r3, r2
 800515a:	b25a      	sxtb	r2, r3
 800515c:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <lcd_Send_Data+0x26c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	4619      	mov	r1, r3
 8005164:	2301      	movs	r3, #1
 8005166:	408b      	lsls	r3, r1
 8005168:	b25b      	sxtb	r3, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	b25a      	sxtb	r2, r3
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <lcd_Send_Data+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	78db      	ldrb	r3, [r3, #3]
 8005174:	4619      	mov	r1, r3
 8005176:	2301      	movs	r3, #1
 8005178:	408b      	lsls	r3, r1
 800517a:	b25b      	sxtb	r3, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	b25b      	sxtb	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	73fb      	strb	r3, [r7, #15]

	for(int i = 0;i<4;i++)
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e00b      	b.n	80051a2 <lcd_Send_Data+0x25a>
	{
		HC595_ShiftOut(data_t+i,1,0);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f107 020c 	add.w	r2, r7, #12
 8005190:	4413      	add	r3, r2
 8005192:	2200      	movs	r2, #0
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fc8a 	bl	8004ab0 <HC595_ShiftOut>
	for(int i = 0;i<4;i++)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3301      	adds	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	ddf0      	ble.n	800518a <lcd_Send_Data+0x242>
	}
	//HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1,(uint8_t *)data_t, 4, 100);
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200001d8 	.word	0x200001d8

080051b8 <lcd_Send_String>:

void lcd_Send_String(char *str)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	while(*str) lcd_Send_Data(*str++);
 80051c0:	e006      	b.n	80051d0 <lcd_Send_String+0x18>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff febc 	bl	8004f48 <lcd_Send_Data>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f4      	bne.n	80051c2 <lcd_Send_String+0xa>
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <lcd_Put_Cur>:

void lcd_Put_Cur(int row,int col)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
	switch(row)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <lcd_Put_Cur+0x18>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d005      	beq.n	8005204 <lcd_Put_Cur+0x22>
 80051f8:	e009      	b.n	800520e <lcd_Put_Cur+0x2c>
	{
		case 0:
			col |= 0x80; //0x80 1 000 000x
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005200:	603b      	str	r3, [r7, #0]
			break;
 8005202:	e004      	b.n	800520e <lcd_Put_Cur+0x2c>
		case 1:
			col |= 0xC0; // 0xC1 1 100 000x
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800520a:	603b      	str	r3, [r7, #0]
			break;
 800520c:	bf00      	nop
	}
	//Gửi lệnh ứng với vị trí cần xuất hiện con trỏ Set DDRAM address tr24
	lcd_send_cmd(col);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fd84 	bl	8004d20 <lcd_send_cmd>
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <newPMS7003>:
#include "PMS7003.h"

static	uint8_t txbuffer[7];

PMS7003 newPMS7003(void)
{
 8005220:	b4b0      	push	{r4, r5, r7}
 8005222:	b08d      	sub	sp, #52	; 0x34
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	PMS7003 new_PMS7003;
	new_PMS7003.MODE = DATAL_passive;
 8005228:	2300      	movs	r3, #0
 800522a:	733b      	strb	r3, [r7, #12]
	return new_PMS7003;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	461d      	mov	r5, r3
 8005230:	f107 0408 	add.w	r4, r7, #8
 8005234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005240:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	3734      	adds	r7, #52	; 0x34
 8005248:	46bd      	mov	sp, r7
 800524a:	bcb0      	pop	{r4, r5, r7}
 800524c:	4770      	bx	lr
	...

08005250 <checksum>:

void checksum(void){
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	80fb      	strh	r3, [r7, #6]
	for (int i = 0 ; i<5 ; i++){
 800525a:	2300      	movs	r3, #0
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	e00a      	b.n	8005276 <checksum+0x26>
		sum = sum + txbuffer[i];
 8005260:	4a0e      	ldr	r2, [pc, #56]	; (800529c <checksum+0x4c>)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	4413      	add	r3, r2
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b29a      	uxth	r2, r3
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	4413      	add	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]
	for (int i = 0 ; i<5 ; i++){
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	ddf1      	ble.n	8005260 <checksum+0x10>
	}
	txbuffer[6] = sum;
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <checksum+0x4c>)
 8005282:	719a      	strb	r2, [r3, #6]
	txbuffer[5] = sum >> 8;
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b29b      	uxth	r3, r3
 800528a:	b2da      	uxtb	r2, r3
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <checksum+0x4c>)
 800528e:	715a      	strb	r2, [r3, #5]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	200001dc 	.word	0x200001dc

080052a0 <PMS7003_init_setmode>:

void PMS7003_init_setmode (PMS7003* _PMS7003,  uint8_t mode)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]

		txbuffer[0] = byte1;
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052ae:	2242      	movs	r2, #66	; 0x42
 80052b0:	701a      	strb	r2, [r3, #0]
		txbuffer[1] = byte2;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052b4:	224d      	movs	r2, #77	; 0x4d
 80052b6:	705a      	strb	r2, [r3, #1]
		txbuffer[3] = byte4;
 80052b8:	4b15      	ldr	r3, [pc, #84]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	70da      	strb	r2, [r3, #3]

		if (mode == DATAL_passive){
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10e      	bne.n	80052e2 <PMS7003_init_setmode+0x42>
			txbuffer[2] = CMD_change;
 80052c4:	4b12      	ldr	r3, [pc, #72]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052c6:	22e1      	movs	r2, #225	; 0xe1
 80052c8:	709a      	strb	r2, [r3, #2]
			txbuffer[4] = DATAL_passive;
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	711a      	strb	r2, [r3, #4]
			checksum();
 80052d0:	f7ff ffbe 	bl	8005250 <checksum>
			HAL_UART_Transmit(_PMS7003->hUARTx, txbuffer, 7, 100);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	2364      	movs	r3, #100	; 0x64
 80052da:	2207      	movs	r2, #7
 80052dc:	490c      	ldr	r1, [pc, #48]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052de:	f7fe fd4f 	bl	8003d80 <HAL_UART_Transmit>
		}
		if (mode == DATAL_active){
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10e      	bne.n	8005306 <PMS7003_init_setmode+0x66>
			txbuffer[2] = CMD_change;
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052ea:	22e1      	movs	r2, #225	; 0xe1
 80052ec:	709a      	strb	r2, [r3, #2]
			txbuffer[4] = DATAL_active;
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <PMS7003_init_setmode+0x70>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	711a      	strb	r2, [r3, #4]
			checksum();
 80052f4:	f7ff ffac 	bl	8005250 <checksum>
			HAL_UART_Transmit(_PMS7003->hUARTx, txbuffer, 7, 100);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	2364      	movs	r3, #100	; 0x64
 80052fe:	2207      	movs	r2, #7
 8005300:	4903      	ldr	r1, [pc, #12]	; (8005310 <PMS7003_init_setmode+0x70>)
 8005302:	f7fe fd3d 	bl	8003d80 <HAL_UART_Transmit>
		}
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200001dc 	.word	0x200001dc

08005314 <PMS7003_start_receive>:
	txbuffer[2] = CMD_read;
	checksum();
	return HAL_UART_Transmit(_PMS7003->hUARTx, txbuffer, 7, 100);
}

HAL_StatusTypeDef PMS7003_start_receive(PMS7003* _PMS7003){
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	return HAL_UART_Receive_IT(_PMS7003->hUARTx, _PMS7003->buffer, 32);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3305      	adds	r3, #5
 8005324:	2220      	movs	r2, #32
 8005326:	4619      	mov	r1, r3
 8005328:	f7fe fdad 	bl	8003e86 <HAL_UART_Receive_IT>
 800532c:	4603      	mov	r3, r0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <PMS7003_receive>:

HAL_StatusTypeDef PMS7003_receive(PMS7003* _PMS7003){
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
	return HAL_UART_Receive_IT(_PMS7003->hUARTx, _PMS7003->buffer, 32); // bật cờ ngắt
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3305      	adds	r3, #5
 8005346:	2220      	movs	r2, #32
 8005348:	4619      	mov	r1, r3
 800534a:	f7fe fd9c 	bl	8003e86 <HAL_UART_Receive_IT>
 800534e:	4603      	mov	r3, r0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <uint8_to_uint16>:

uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	460a      	mov	r2, r1
 8005362:	71fb      	strb	r3, [r7, #7]
 8005364:	4613      	mov	r3, r2
 8005366:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	b29b      	uxth	r3, r3
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	b29a      	uxth	r2, r3
 8005370:	79bb      	ldrb	r3, [r7, #6]
 8005372:	b29b      	uxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b29b      	uxth	r3, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <calculator>:

uint16_t calculator (PMS7003* _PMS7003, uint8_t parameter){
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
	switch (parameter) {
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	2b64      	cmp	r3, #100	; 0x64
 8005392:	d01a      	beq.n	80053ca <calculator+0x48>
 8005394:	2b64      	cmp	r3, #100	; 0x64
 8005396:	dc22      	bgt.n	80053de <calculator+0x5c>
 8005398:	2b0a      	cmp	r3, #10
 800539a:	d002      	beq.n	80053a2 <calculator+0x20>
 800539c:	2b19      	cmp	r3, #25
 800539e:	d00a      	beq.n	80053b6 <calculator+0x34>
 80053a0:	e01d      	b.n	80053de <calculator+0x5c>
		case PM1p0:
			return uint8_to_uint16(_PMS7003->buffer[4], _PMS7003->buffer[5]);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7a5a      	ldrb	r2, [r3, #9]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7a9b      	ldrb	r3, [r3, #10]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7ff ffd3 	bl	8005358 <uint8_to_uint16>
 80053b2:	4603      	mov	r3, r0
 80053b4:	e014      	b.n	80053e0 <calculator+0x5e>
			break;
		case PM2p5:
			return uint8_to_uint16(_PMS7003->buffer[6], _PMS7003->buffer[7]);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	7ada      	ldrb	r2, [r3, #11]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7b1b      	ldrb	r3, [r3, #12]
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7ff ffc9 	bl	8005358 <uint8_to_uint16>
 80053c6:	4603      	mov	r3, r0
 80053c8:	e00a      	b.n	80053e0 <calculator+0x5e>
			break;
		case PM10:
			return uint8_to_uint16(_PMS7003->buffer[8], _PMS7003->buffer[9]);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7b5a      	ldrb	r2, [r3, #13]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	7b9b      	ldrb	r3, [r3, #14]
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f7ff ffbf 	bl	8005358 <uint8_to_uint16>
 80053da:	4603      	mov	r3, r0
 80053dc:	e000      	b.n	80053e0 <calculator+0x5e>
			break;
		}
	return 0;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SHT31_Config>:
};
const uint16_t MilsPerMeasure[5] = {2005, 1005, 505, 255, 105}; // table 9 page 11 in column mps, + 5ms for correctly read
//                           0.5     1    2    4   10
uint8_t MeasureTime[3] = {13,5,3}; // table 4 page 7

void SHT31_Config(uint8_t address, I2C_HandleTypeDef* hi2c) {
 80053e8:	b5b0      	push	{r4, r5, r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	71fb      	strb	r3, [r7, #7]
	sht31.address = address;
 80053f4:	4a0c      	ldr	r2, [pc, #48]	; (8005428 <SHT31_Config+0x40>)
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	7013      	strb	r3, [r2, #0]
	sht31.hi2c = hi2c;
 80053fa:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <SHT31_Config+0x40>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6053      	str	r3, [r2, #4]

	sht31.mode = SHT31_SingleShot;
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <SHT31_Config+0x40>)
 8005402:	2200      	movs	r2, #0
 8005404:	721a      	strb	r2, [r3, #8]
	sht31.isCurrentlyPeriodic = 0;
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <SHT31_Config+0x40>)
 8005408:	2200      	movs	r2, #0
 800540a:	60da      	str	r2, [r3, #12]

	sht31.lastMeasureTime = HAL_GetTick();
 800540c:	f7fc f89c 	bl	8001548 <HAL_GetTick>
 8005410:	4603      	mov	r3, r0
 8005412:	2200      	movs	r2, #0
 8005414:	461c      	mov	r4, r3
 8005416:	4615      	mov	r5, r2
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <SHT31_Config+0x40>)
 800541a:	e9c3 4504 	strd	r4, r5, [r3, #16]
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bdb0      	pop	{r4, r5, r7, pc}
 8005426:	bf00      	nop
 8005428:	200001e8 	.word	0x200001e8

0800542c <SHT31_SendCommand>:

SHT31_Status SHT31_SendCommand(uint16_t command) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af02      	add	r7, sp, #8
 8005432:	4603      	mov	r3, r0
 8005434:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2] = {command >> 8, command & (0xFF)};
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	b29b      	uxth	r3, r3
 800543c:	b2db      	uxtb	r3, r3
 800543e:	733b      	strb	r3, [r7, #12]
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(sht31.hi2c, sht31.address<<1, buffer, 2, HAL_MAX_DELAY);
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <SHT31_SendCommand+0x50>)
 8005448:	6858      	ldr	r0, [r3, #4]
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <SHT31_SendCommand+0x50>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	b299      	uxth	r1, r3
 8005454:	f107 020c 	add.w	r2, r7, #12
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2302      	movs	r3, #2
 8005460:	f7fc fd40 	bl	8001ee4 <HAL_I2C_Master_Transmit>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) {
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <SHT31_SendCommand+0x46>
		return SHT31_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <SHT31_SendCommand+0x48>
	}
	return SHT31_Transmit_Error;
 8005472:	2304      	movs	r3, #4
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	200001e8 	.word	0x200001e8

08005480 <SHT31_GetBytes>:

SHT31_Status SHT31_GetBytes(uint8_t* buffer, int num) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(sht31.hi2c, sht31.address<<1, buffer, num, HAL_MAX_DELAY);
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <SHT31_GetBytes+0x40>)
 800548c:	6858      	ldr	r0, [r3, #4]
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <SHT31_GetBytes+0x40>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	b299      	uxth	r1, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f04f 32ff 	mov.w	r2, #4294967295
 80054a0:	9200      	str	r2, [sp, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	f7fc fe1c 	bl	80020e0 <HAL_I2C_Master_Receive>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) {
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <SHT31_GetBytes+0x36>
		return SHT31_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <SHT31_GetBytes+0x38>
	}
	return SHT31_Transmit_Error;
 80054b6:	2304      	movs	r3, #4
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200001e8 	.word	0x200001e8

080054c4 <SHT31_GetData>:

SHT31_Status SHT31_GetData(Mode mode, Repeatability rep, ClockStretch stretch,MPS mps) {
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	b089      	sub	sp, #36	; 0x24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	4606      	mov	r6, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	461a      	mov	r2, r3
 80054d4:	4633      	mov	r3, r6
 80054d6:	73fb      	strb	r3, [r7, #15]
 80054d8:	4603      	mov	r3, r0
 80054da:	73bb      	strb	r3, [r7, #14]
 80054dc:	460b      	mov	r3, r1
 80054de:	737b      	strb	r3, [r7, #13]
 80054e0:	4613      	mov	r3, r2
 80054e2:	733b      	strb	r3, [r7, #12]
	uint16_t command = SHT31_GetCommand(mode, rep, stretch, mps);
 80054e4:	7b3b      	ldrb	r3, [r7, #12]
 80054e6:	7b7a      	ldrb	r2, [r7, #13]
 80054e8:	7bb9      	ldrb	r1, [r7, #14]
 80054ea:	7bf8      	ldrb	r0, [r7, #15]
 80054ec:	f000 f89a 	bl	8005624 <SHT31_GetCommand>
 80054f0:	4603      	mov	r3, r0
 80054f2:	83bb      	strh	r3, [r7, #28]

	SHT31_Status ret;

	if(sht31.mode == SHT31_SingleShot) {
 80054f4:	4b48      	ldr	r3, [pc, #288]	; (8005618 <SHT31_GetData+0x154>)
 80054f6:	7a1b      	ldrb	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <SHT31_GetData+0x4e>

		ret = SHT31_SendCommand(command);
 80054fc:	8bbb      	ldrh	r3, [r7, #28]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff ff94 	bl	800542c <SHT31_SendCommand>
 8005504:	4603      	mov	r3, r0
 8005506:	77fb      	strb	r3, [r7, #31]
		if(ret != SHT31_OK) {
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d03e      	beq.n	800558c <SHT31_GetData+0xc8>
			return SHT31_Transmit_Error;
 800550e:	2304      	movs	r3, #4
 8005510:	e07c      	b.n	800560c <SHT31_GetData+0x148>
		}

	}
	else if(sht31.mode == SHT31_Periodic){
 8005512:	4b41      	ldr	r3, [pc, #260]	; (8005618 <SHT31_GetData+0x154>)
 8005514:	7a1b      	ldrb	r3, [r3, #8]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d138      	bne.n	800558c <SHT31_GetData+0xc8>
		if(HAL_GetTick() - sht31.lastMeasureTime > MilsPerMeasure[mps]) { // must wait for enough time before read in Periodic mode
 800551a:	f7fc f815 	bl	8001548 <HAL_GetTick>
 800551e:	4603      	mov	r3, r0
 8005520:	2200      	movs	r2, #0
 8005522:	469a      	mov	sl, r3
 8005524:	4693      	mov	fp, r2
 8005526:	4b3c      	ldr	r3, [pc, #240]	; (8005618 <SHT31_GetData+0x154>)
 8005528:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800552c:	ebba 0402 	subs.w	r4, sl, r2
 8005530:	eb6b 0503 	sbc.w	r5, fp, r3
 8005534:	7b3b      	ldrb	r3, [r7, #12]
 8005536:	4a39      	ldr	r2, [pc, #228]	; (800561c <SHT31_GetData+0x158>)
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	b29b      	uxth	r3, r3
 800553e:	2200      	movs	r2, #0
 8005540:	4698      	mov	r8, r3
 8005542:	4691      	mov	r9, r2
 8005544:	45a0      	cmp	r8, r4
 8005546:	eb79 0305 	sbcs.w	r3, r9, r5
 800554a:	da1d      	bge.n	8005588 <SHT31_GetData+0xc4>
			sht31.lastMeasureTime = HAL_GetTick();
 800554c:	f7fb fffc 	bl	8001548 <HAL_GetTick>
 8005550:	4603      	mov	r3, r0
 8005552:	2200      	movs	r2, #0
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <SHT31_GetData+0x154>)
 800555a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800555e:	e9c3 1204 	strd	r1, r2, [r3, #16]

			if(sht31.isCurrentlyPeriodic == 0) { // Just the first period in Periodic mode need to send command
 8005562:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <SHT31_GetData+0x154>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d110      	bne.n	800558c <SHT31_GetData+0xc8>

				ret = SHT31_SendCommand(command);
 800556a:	8bbb      	ldrh	r3, [r7, #28]
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff5d 	bl	800542c <SHT31_SendCommand>
 8005572:	4603      	mov	r3, r0
 8005574:	77fb      	strb	r3, [r7, #31]
				if(ret != SHT31_OK) {
 8005576:	7ffb      	ldrb	r3, [r7, #31]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <SHT31_GetData+0xbc>
					return SHT31_Transmit_Error;
 800557c:	2304      	movs	r3, #4
 800557e:	e045      	b.n	800560c <SHT31_GetData+0x148>
				}

				sht31.isCurrentlyPeriodic = 1;
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <SHT31_GetData+0x154>)
 8005582:	2201      	movs	r2, #1
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	e001      	b.n	800558c <SHT31_GetData+0xc8>
			}
		}
		else {
			return SHT31_Not_Ready;
 8005588:	2303      	movs	r3, #3
 800558a:	e03f      	b.n	800560c <SHT31_GetData+0x148>
		}
	}

	HAL_Delay(MeasureTime[rep]); // measure duration in table 4 page 7
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	4a24      	ldr	r2, [pc, #144]	; (8005620 <SHT31_GetData+0x15c>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fb ffe2 	bl	800155c <HAL_Delay>
	uint8_t buffer[6];
	SHT31_GetBytes(buffer, 6);
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	2106      	movs	r1, #6
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff6e 	bl	8005480 <SHT31_GetBytes>



	if(buffer[2] != SHT31_CRC_8(&buffer[0], 2)) {
 80055a4:	7dbc      	ldrb	r4, [r7, #22]
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	2102      	movs	r1, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f875 	bl	800569c <SHT31_CRC_8>
 80055b2:	4603      	mov	r3, r0
 80055b4:	429c      	cmp	r4, r3
 80055b6:	d002      	beq.n	80055be <SHT31_GetData+0xfa>
		ret =  SHT31_Data_Error;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e00b      	b.n	80055d6 <SHT31_GetData+0x112>
	}
	else {
		sht31.temperature_raw = (buffer[0] << 8) + buffer[1];
 80055be:	7d3b      	ldrb	r3, [r7, #20]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	7d7b      	ldrb	r3, [r7, #21]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <SHT31_GetData+0x154>)
 80055d0:	831a      	strh	r2, [r3, #24]
		ret = SHT31_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
	}

	if(buffer[5] != SHT31_CRC_8(&buffer[3], 2)) {
 80055d6:	7e7c      	ldrb	r4, [r7, #25]
 80055d8:	f107 0314 	add.w	r3, r7, #20
 80055dc:	3303      	adds	r3, #3
 80055de:	2102      	movs	r1, #2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f85b 	bl	800569c <SHT31_CRC_8>
 80055e6:	4603      	mov	r3, r0
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d002      	beq.n	80055f2 <SHT31_GetData+0x12e>
		ret =  SHT31_Data_Error;
 80055ec:	2301      	movs	r3, #1
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e00b      	b.n	800560a <SHT31_GetData+0x146>
	}
	else {
		sht31.humidity_raw = (buffer[3] << 8) + buffer[4];
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	7e3b      	ldrb	r3, [r7, #24]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	4413      	add	r3, r2
 8005600:	b29a      	uxth	r2, r3
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <SHT31_GetData+0x154>)
 8005604:	835a      	strh	r2, [r3, #26]
		ret = SHT31_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	77fb      	strb	r3, [r7, #31]
	}
	return ret;
 800560a:	7ffb      	ldrb	r3, [r7, #31]



}
 800560c:	4618      	mov	r0, r3
 800560e:	3724      	adds	r7, #36	; 0x24
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005616:	bf00      	nop
 8005618:	200001e8 	.word	0x200001e8
 800561c:	08005898 	.word	0x08005898
 8005620:	2000000c 	.word	0x2000000c

08005624 <SHT31_GetCommand>:

uint16_t SHT31_GetCommand(Mode mode, Repeatability rep, ClockStretch stretch,MPS mps) {
 8005624:	b490      	push	{r4, r7}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4623      	mov	r3, r4
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	4603      	mov	r3, r0
 8005638:	71bb      	strb	r3, [r7, #6]
 800563a:	460b      	mov	r3, r1
 800563c:	717b      	strb	r3, [r7, #5]
 800563e:	4613      	mov	r3, r2
 8005640:	713b      	strb	r3, [r7, #4]
	if(mode == SHT31_SingleShot) {
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <SHT31_GetCommand+0x3e>
		sht31.mode = SHT31_SingleShot;
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <SHT31_GetCommand+0x6c>)
 800564a:	2200      	movs	r2, #0
 800564c:	721a      	strb	r2, [r3, #8]
		return MeasureSingleShotCMD[stretch][rep];
 800564e:	797a      	ldrb	r2, [r7, #5]
 8005650:	79b9      	ldrb	r1, [r7, #6]
 8005652:	4810      	ldr	r0, [pc, #64]	; (8005694 <SHT31_GetCommand+0x70>)
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	440b      	add	r3, r1
 800565c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005660:	e010      	b.n	8005684 <SHT31_GetCommand+0x60>
	}
	else if(mode == SHT31_Periodic) {
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d10c      	bne.n	8005682 <SHT31_GetCommand+0x5e>
		sht31.mode = SHT31_Periodic;
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <SHT31_GetCommand+0x6c>)
 800566a:	2201      	movs	r2, #1
 800566c:	721a      	strb	r2, [r3, #8]

		return MeasurePeriodicCMD[mps][rep];
 800566e:	793a      	ldrb	r2, [r7, #4]
 8005670:	79b9      	ldrb	r1, [r7, #6]
 8005672:	4809      	ldr	r0, [pc, #36]	; (8005698 <SHT31_GetCommand+0x74>)
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	440b      	add	r3, r1
 800567c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005680:	e000      	b.n	8005684 <SHT31_GetCommand+0x60>
	}
	return 0x0;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bc90      	pop	{r4, r7}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	200001e8 	.word	0x200001e8
 8005694:	0800586c 	.word	0x0800586c
 8005698:	08005878 	.word	0x08005878

0800569c <SHT31_CRC_8>:


uint8_t SHT31_CRC_8(uint8_t* data, int len) {
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xFF;
 80056a6:	23ff      	movs	r3, #255	; 0xff
 80056a8:	73fb      	strb	r3, [r7, #15]
	const uint8_t poly = 0x31;
 80056aa:	2331      	movs	r3, #49	; 0x31
 80056ac:	733b      	strb	r3, [r7, #12]

	for(uint8_t byte = len; byte; byte--) {
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	73bb      	strb	r3, [r7, #14]
 80056b2:	e023      	b.n	80056fc <SHT31_CRC_8+0x60>
		crc ^= *(data++);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	4053      	eors	r3, r2
 80056c0:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 8; i; i--) {
 80056c2:	2308      	movs	r3, #8
 80056c4:	737b      	strb	r3, [r7, #13]
 80056c6:	e013      	b.n	80056f0 <SHT31_CRC_8+0x54>
			crc = (crc & 0x80)? (crc<<1)^poly : (crc<<1);
 80056c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	da08      	bge.n	80056e2 <SHT31_CRC_8+0x46>
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	b25a      	sxtb	r2, r3
 80056d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80056da:	4053      	eors	r3, r2
 80056dc:	b25b      	sxtb	r3, r3
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e002      	b.n	80056e8 <SHT31_CRC_8+0x4c>
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 8; i; i--) {
 80056ea:	7b7b      	ldrb	r3, [r7, #13]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	737b      	strb	r3, [r7, #13]
 80056f0:	7b7b      	ldrb	r3, [r7, #13]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e8      	bne.n	80056c8 <SHT31_CRC_8+0x2c>
	for(uint8_t byte = len; byte; byte--) {
 80056f6:	7bbb      	ldrb	r3, [r7, #14]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	73bb      	strb	r3, [r7, #14]
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1d8      	bne.n	80056b4 <SHT31_CRC_8+0x18>
		}
	}
	return crc;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
	...

08005710 <SHT31_GetHumidity>:



float SHT31_GetHumidity() {
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
	return 100.0*(sht31.humidity_raw)/65535;
 8005714:	4b10      	ldr	r3, [pc, #64]	; (8005758 <SHT31_GetHumidity+0x48>)
 8005716:	8b5b      	ldrh	r3, [r3, #26]
 8005718:	4618      	mov	r0, r3
 800571a:	f7fa fe6b 	bl	80003f4 <__aeabi_i2d>
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	4b0e      	ldr	r3, [pc, #56]	; (800575c <SHT31_GetHumidity+0x4c>)
 8005724:	f7fa fed0 	bl	80004c8 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	a307      	add	r3, pc, #28	; (adr r3, 8005750 <SHT31_GetHumidity+0x40>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa fff1 	bl	800071c <__aeabi_ddiv>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	f7fb f8d3 	bl	80008ec <__aeabi_d2f>
 8005746:	4603      	mov	r3, r0
}
 8005748:	4618      	mov	r0, r3
 800574a:	bd80      	pop	{r7, pc}
 800574c:	f3af 8000 	nop.w
 8005750:	00000000 	.word	0x00000000
 8005754:	40efffe0 	.word	0x40efffe0
 8005758:	200001e8 	.word	0x200001e8
 800575c:	40590000 	.word	0x40590000

08005760 <SHT31_GetTemperature>:
float SHT31_GetTemperature() {
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
	return 175.0*(sht31.temperature_raw)/65535 - 45;
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <SHT31_GetTemperature+0x60>)
 8005766:	8b1b      	ldrh	r3, [r3, #24]
 8005768:	4618      	mov	r0, r3
 800576a:	f7fa fe43 	bl	80003f4 <__aeabi_i2d>
 800576e:	a310      	add	r3, pc, #64	; (adr r3, 80057b0 <SHT31_GetTemperature+0x50>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fa fea8 	bl	80004c8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	a30d      	add	r3, pc, #52	; (adr r3, 80057b8 <SHT31_GetTemperature+0x58>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa ffc9 	bl	800071c <__aeabi_ddiv>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4610      	mov	r0, r2
 8005790:	4619      	mov	r1, r3
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <SHT31_GetTemperature+0x64>)
 8005798:	f7fa fcde 	bl	8000158 <__aeabi_dsub>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f7fb f8a2 	bl	80008ec <__aeabi_d2f>
 80057a8:	4603      	mov	r3, r0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	00000000 	.word	0x00000000
 80057b4:	4065e000 	.word	0x4065e000
 80057b8:	00000000 	.word	0x00000000
 80057bc:	40efffe0 	.word	0x40efffe0
 80057c0:	200001e8 	.word	0x200001e8
 80057c4:	40468000 	.word	0x40468000

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	2600      	movs	r6, #0
 80057cc:	4d0c      	ldr	r5, [pc, #48]	; (8005800 <__libc_init_array+0x38>)
 80057ce:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057d0:	1b64      	subs	r4, r4, r5
 80057d2:	10a4      	asrs	r4, r4, #2
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	f000 f822 	bl	8005820 <_init>
 80057dc:	2600      	movs	r6, #0
 80057de:	4d0a      	ldr	r5, [pc, #40]	; (8005808 <__libc_init_array+0x40>)
 80057e0:	4c0a      	ldr	r4, [pc, #40]	; (800580c <__libc_init_array+0x44>)
 80057e2:	1b64      	subs	r4, r4, r5
 80057e4:	10a4      	asrs	r4, r4, #2
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	080058a4 	.word	0x080058a4
 8005804:	080058a4 	.word	0x080058a4
 8005808:	080058a4 	.word	0x080058a4
 800580c:	080058a8 	.word	0x080058a8

08005810 <memset>:
 8005810:	4603      	mov	r3, r0
 8005812:	4402      	add	r2, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
